{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services\";\nexport let HttpErrorInterceptor = /*#__PURE__*/(() => {\n  class HttpErrorInterceptor {\n    constructor(notificationService) {\n      this.notificationService = notificationService;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(err => this.handleHttpError(err)));\n    }\n    handleHttpError(error) {\n      switch (error.status) {\n        case 400:\n        case 404:\n          this.notificationService.createNotification(error.error.message);\n          break;\n        case 429:\n          this.notificationService.createNotification('Oops, you are not supposed to see this error. Please email me if you read this - I would really appreciate it!', 'email', 4200);\n          break;\n        default:\n          this.notificationService.createNotification(error.message);\n          break;\n      }\n      return throwError(error);\n    }\n    static #_ = this.ɵfac = function HttpErrorInterceptor_Factory(t) {\n      return new (t || HttpErrorInterceptor)(i0.ɵɵinject(i1.NotificationService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HttpErrorInterceptor,\n      factory: HttpErrorInterceptor.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return HttpErrorInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}