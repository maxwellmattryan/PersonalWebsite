{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '@ui/environments/environment';\nimport { ApiService } from '@ui/core/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ShopApiService = /*#__PURE__*/(() => {\n  class ShopApiService extends ApiService {\n    constructor(http) {\n      super(http);\n    }\n    createCategory(category) {\n      const headers = this.contentTypeHeader();\n      return this.http.post(`${environment.API_URL}/shop/categories`, category, {\n        headers\n      });\n    }\n    getCategories() {\n      return this.http.get(`${environment.API_URL}/shop/categories`);\n    }\n    updateCategory(category) {\n      const headers = this.contentTypeHeader();\n      return this.http.put(`${environment.API_URL}/shop/categories/${category.id}`, category, {\n        headers\n      });\n    }\n    deleteCategory(categoryId) {\n      return this.http.delete(`${environment.API_URL}/shop/categories/${categoryId}`);\n    }\n    createProduct(product) {\n      const headers = this.contentTypeHeader();\n      return this.http.post(`${environment.API_URL}/shop/products`, product, {\n        headers\n      });\n    }\n    // NOTE: statusId is set to 1 by default to correspond with 'AVAILABLE' products\n    getProducts(statusId = '', categoryId = '') {\n      let params = new HttpParams();\n      if (statusId != '') params = params.set('statusId', statusId);\n      if (categoryId != '') params = params.set('categoryId', categoryId);\n      return this.http.get(`${environment.API_URL}/shop/products`, {\n        params\n      });\n    }\n    getProductStatuses() {\n      return this.http.get(`${environment.API_URL}/shop/product-statuses`);\n    }\n    updateProduct(product) {\n      const headers = this.contentTypeHeader();\n      return this.http.put(`${environment.API_URL}/shop/products/${product.id}`, product, {\n        headers\n      });\n    }\n    deleteProduct(productId, softDelete = true) {\n      let params = new HttpParams();\n      if (softDelete) params = params.set('doSoftDelete', 'true');\n      return this.http.delete(`${environment.API_URL}/shop/products/${productId}`, {\n        params: params\n      });\n    }\n    helpCustomer(customerData) {\n      const headers = this.contentTypeHeader();\n      console.log(customerData);\n      return this.http.post(`${environment.API_URL}/shop/customers/help`, customerData, {\n        headers\n      });\n    }\n    static #_ = this.ɵfac = function ShopApiService_Factory(t) {\n      return new (t || ShopApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ShopApiService,\n      factory: ShopApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ShopApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}