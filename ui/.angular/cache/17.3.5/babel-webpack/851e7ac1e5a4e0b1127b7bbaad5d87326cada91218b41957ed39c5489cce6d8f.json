{"ast":null,"code":"import { of, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"../services\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(router, authService, notificationService) {\n      this.router = router;\n      this.authService = authService;\n      this.notificationService = notificationService;\n    }\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(err => this.handleAuthError(err)));\n    }\n    handleAuthError(err) {\n      if (err.status === 401 || err.status === 403) {\n        this.authService.logoutAdmin();\n        this.notificationService.createNotification('Unauthorized request. Please log in.');\n        this.router.navigate(['/admin/login']);\n        return of(err.message);\n      } else {\n        return throwError(err);\n      }\n    }\n    static #_ = this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.NotificationService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}