{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '@ui/environments/environment';\nimport { ApiService } from '@ui/core/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BlogApiService = /*#__PURE__*/(() => {\n  class BlogApiService extends ApiService {\n    constructor(http) {\n      super(http);\n    }\n    getBlogAuthors() {\n      return this.http.get(`${environment.API_URL}/blog/authors`);\n    }\n    createPost(post) {\n      const headers = this.contentTypeHeader();\n      return this.http.post(`${environment.API_URL}/blog/posts`, post, {\n        headers\n      });\n    }\n    deletePost(id) {\n      return this.http.delete(`${environment.API_URL}/blog/posts/${id}`);\n    }\n    getPost(id) {\n      return this.http.get(`${environment.API_URL}/blog/posts/${id}`);\n    }\n    getPosts(topicId = -1, publishedOnly = true) {\n      let params = new HttpParams();\n      if (topicId != -1) params = params.set('topicId', topicId.toString());\n      if (publishedOnly) params = params.set('isPublished', 'true');\n      return this.http.get(`${environment.API_URL}/blog/posts`, {\n        params: params\n      });\n    }\n    getPostStatuses() {\n      return this.http.get(`${environment.API_URL}/blog/post-statuses`);\n    }\n    updatePost(post) {\n      const headers = this.contentTypeHeader();\n      return this.http.put(`${environment.API_URL}/blog/posts/${post.id}`, post, {\n        headers\n      });\n    }\n    createTopic(topic) {\n      const headers = this.contentTypeHeader();\n      return this.http.post(`${environment.API_URL}/blog/topics`, topic, {\n        headers\n      });\n    }\n    deleteTopic(id) {\n      return this.http.delete(`${environment.API_URL}/blog/topics/${id}`);\n    }\n    getTopics() {\n      return this.http.get(`${environment.API_URL}/blog/topics`);\n    }\n    updateTopic(topic) {\n      const headers = this.contentTypeHeader();\n      return this.http.put(`${environment.API_URL}/blog/topics/${topic.id}`, topic, {\n        headers\n      });\n    }\n    static #_ = this.ɵfac = function BlogApiService_Factory(t) {\n      return new (t || BlogApiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BlogApiService,\n      factory: BlogApiService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return BlogApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}