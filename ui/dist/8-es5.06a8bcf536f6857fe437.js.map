{"version":3,"sources":["webpack:///src/app/modules/portfolio/services/portfolio-api.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-profile.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-editor.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-comparison.service.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.html"],"names":["PortfolioApiService","PortfolioProfileService","PortfolioEditorService","PortfolioComparisonService","http","profileId","headers","this","contentTypeHeader","put","environment","API_URL","profile","post","id","get","project","super","profiles","p1","p2","name","profileTechnologies","pt1","pt2","display_order","projects","console","log","activeProfile","LoadingSpinnerComponent"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus,\r\n    PortfolioProfileTechnology,\r\n    PortfolioProject\r\n} from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    activateProfile(profileId: number): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profileId}/activate`,\r\n            {},\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles`,\r\n            profile,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProfile(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/profiles/${id}`)\r\n    }\r\n\r\n    getProfiles(): Observable<PortfolioProfile[]> {\r\n        return this.http.get<PortfolioProfile[]>(`${environment.API_URL}/portfolio/profiles`);\r\n    }\r\n\r\n    getProfileStatuses(): Observable<PortfolioProfileStatus[]> {\r\n        return this.http.get<PortfolioProfileStatus[]>(`${environment.API_URL}/portfolio/profiles/statuses`);\r\n    }\r\n\r\n    getProfileTechnologies(id: number): Observable<PortfolioProfileTechnology[]> {\r\n        return this.http.get<PortfolioProfileTechnology[]>(`${environment.API_URL}/portfolio/profiles/${id}/technologies`);\r\n    }\r\n\r\n    updateProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profile.id}`,\r\n            profile,\r\n            { headers }\r\n        )\r\n    }\r\n\r\n    createProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProject(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProject(id: number): Observable<PortfolioProject> {\r\n        return this.http.get<PortfolioProject>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProjects(): Observable<PortfolioProject[]> {\r\n        return this.http.get<PortfolioProject[]>(`${environment.API_URL}/portfolio/projects`);\r\n    }\r\n\r\n    updateProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects/${project.id}`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PortfolioProfile } from '@ui/modules/portfolio/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioProfileService {\r\n    private activeProfile: PortfolioProfile;\r\n\r\n    constructor() { }\r\n\r\n    public getActiveProfile(): PortfolioProfile {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    public getActiveProfileName(): string {\r\n        return this.activeProfile ? this.activeProfile.name : 'Software Engineering';\r\n    }\r\n\r\n    public setActiveProfile(profile: PortfolioProfile): void {\r\n        this.activeProfile = profile;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioEditorService extends EditorService {\r\n    private profile: PortfolioProfile;\r\n    private project: PortfolioProject;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getProfile(): PortfolioProfile {\r\n        console.log(this.profile);\r\n        return this.profile;\r\n    }\r\n\r\n    hasProfile(): boolean {\r\n        return this.profile !== undefined;\r\n    }\r\n\r\n    setProfile(profile: PortfolioProfile): void {\r\n        this.profile = profile;\r\n        console.log(this.profile);\r\n    }\r\n\r\n    getProject(): PortfolioProject {\r\n        return this.project;\r\n    }\r\n\r\n    hasProject(): boolean {\r\n        return this.project !== undefined;\r\n    }\r\n\r\n    setProject(project: PortfolioProject): void {\r\n        this.project = project;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProfileTechnology, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    profiles = (p1: PortfolioProfile, p2: PortfolioProfile) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    profileTechnologies = (pt1: PortfolioProfileTechnology, pt2: PortfolioProfileTechnology) => {\r\n        if(pt1.display_order > pt2.display_order) return 1;\r\n        if(pt1.display_order < pt2.display_order) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    projects = (p1: PortfolioProject, p2: PortfolioProject) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.scss']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}","<div class=\"app-loading\">\r\n    <div class=\"logo\"></div>\r\n    <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n        <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n</div>"]}