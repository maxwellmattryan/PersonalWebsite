{"version":3,"sources":["webpack:///src/app/modules/portfolio/services/portfolio-api.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-comparison.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-editor.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-profile.service.ts","webpack:///src/app/modules/admin/admin.component.ts","webpack:///src/app/modules/admin/admin.component.html","webpack:///src/app/modules/admin/components/dashboard/dashboard.component.html","webpack:///src/app/modules/admin/admin-routing.module.ts","webpack:///src/app/modules/admin/components/dashboard/dashboard.component.ts","webpack:///src/app/modules/admin/components/login/login.component.ts","webpack:///src/app/modules/admin/components/login/login.component.html","webpack:///src/app/modules/admin/components/register/register.component.ts","webpack:///src/app/modules/admin/components/register/register.component.html","webpack:///src/app/modules/admin/admin.module.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/modules/portfolio/models/portfolio-profile-status.model.ts","webpack:///src/app/modules/portfolio/models/portfolio-profile-technology.model.ts","webpack:///src/app/modules/portfolio/models/portfolio-project.model.ts","webpack:///src/app/modules/portfolio/models/portfolio-profile.model.ts"],"names":["PortfolioApiService","http","super","profileId","headers","this","contentTypeHeader","put","environment","API_URL","profile","post","id","delete","get","project","PortfolioComparisonService","profiles","p1","p2","name","profileTechnologies","pt1","pt2","display_order","projects","PortfolioEditorService","console","log","undefined","PortfolioProfileService","activeProfile","AdminComponent","notificationService","routes","path","component","children","DashboardComponent","router","authApiService","authService","portfolioApiService","portfolioComparisonService","portfolioEditorService","portfolioProfileService","titleService","trackingService","isLoaded","setTitle","isLoggedIn","populateProfiles","getProfiles","subscribe","res","sort","setActiveProfile","find","p","status","activateProfile","modifyProfileStatuses","createNotification","activeId","forEach","logoutAdmin","getAdmin","navigate","setProfile","length","deleteProfile","filter","location","reload","LoginComponent","validationService","username","password","loginAdmin","onLoginSubmit","RegisterComponent","admin","registerAdmin","onRegisterSubmit","AdminRoutingModule","forChild","AdminModule","LoadingSpinnerComponent","PortfolioProfileStatus","partial","Object","assign","input","PortfolioProfileTechnology","map","deserialize","s","technologies","t"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus,\r\n    PortfolioProfileTechnology,\r\n    PortfolioProject\r\n} from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    activateProfile(profileId: number): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profileId}/activate`,\r\n            {},\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles`,\r\n            profile,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProfile(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/profiles/${id}`)\r\n    }\r\n\r\n    getProfiles(): Observable<PortfolioProfile[]> {\r\n        return this.http.get<PortfolioProfile[]>(`${environment.API_URL}/portfolio/profiles`);\r\n    }\r\n\r\n    getProfileStatuses(): Observable<PortfolioProfileStatus[]> {\r\n        return this.http.get<PortfolioProfileStatus[]>(`${environment.API_URL}/portfolio/profiles/statuses`);\r\n    }\r\n\r\n    getProfileTechnologies(id: number): Observable<PortfolioProfileTechnology[]> {\r\n        return this.http.get<PortfolioProfileTechnology[]>(`${environment.API_URL}/portfolio/profiles/${id}/technologies`);\r\n    }\r\n\r\n    updateProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profile.id}`,\r\n            profile,\r\n            { headers }\r\n        )\r\n    }\r\n\r\n    createProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProject(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProject(id: number): Observable<PortfolioProject> {\r\n        return this.http.get<PortfolioProject>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProjects(): Observable<PortfolioProject[]> {\r\n        return this.http.get<PortfolioProject[]>(`${environment.API_URL}/portfolio/projects`);\r\n    }\r\n\r\n    updateProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects/${project.id}`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProfileTechnology, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    profiles = (p1: PortfolioProfile, p2: PortfolioProfile) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    profileTechnologies = (pt1: PortfolioProfileTechnology, pt2: PortfolioProfileTechnology) => {\r\n        if(pt1.display_order > pt2.display_order) return 1;\r\n        if(pt1.display_order < pt2.display_order) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    projects = (p1: PortfolioProject, p2: PortfolioProject) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioEditorService extends EditorService {\r\n    private profile: PortfolioProfile;\r\n    private project: PortfolioProject;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getProfile(): PortfolioProfile {\r\n        console.log(this.profile);\r\n        return this.profile;\r\n    }\r\n\r\n    hasProfile(): boolean {\r\n        return this.profile !== undefined;\r\n    }\r\n\r\n    setProfile(profile: PortfolioProfile): void {\r\n        this.profile = profile;\r\n        console.log(this.profile);\r\n    }\r\n\r\n    getProject(): PortfolioProject {\r\n        return this.project;\r\n    }\r\n\r\n    hasProject(): boolean {\r\n        return this.project !== undefined;\r\n    }\r\n\r\n    setProject(project: PortfolioProject): void {\r\n        this.project = project;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { PortfolioProfile } from '@ui/modules/portfolio/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioProfileService {\r\n    private activeProfile: PortfolioProfile;\r\n\r\n    constructor() { }\r\n\r\n    public getActiveProfile(): PortfolioProfile {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    public getActiveProfileName(): string {\r\n        return this.activeProfile ? this.activeProfile.name : 'Software Engineering';\r\n    }\r\n\r\n    public setActiveProfile(profile: PortfolioProfile): void {\r\n        this.activeProfile = profile;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-admin',\r\n    templateUrl: './admin.component.html'\r\n})\r\nexport class AdminComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","<router-outlet></router-outlet>","<div class='section dashboard' *ngIf='isLoaded; else loading'>\r\n    <h1 class='dashboard__header'>Dashboard</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='!authService.isLoggedIn()'>\r\n        <a class='btn dashboard__btn' [routerLink]=\"['/admin/login']\">Login</a>\r\n        <a class='btn dashboard__btn' (click)='notificationService.createNotification(\"This functionality is not available.\")'>Register</a>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <h2>Blog</h2>\r\n        <br>\r\n        <a class='btn dashboard__btn' routerLink='/blog/posts/editor'>\r\n            Create Post\r\n        </a>\r\n        <a class='btn dashboard__btn' routerLink='/blog/topics/editor'>\r\n            Create Topic\r\n        </a>\r\n        <br>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <h2>Portfolio</h2>\r\n        <br>\r\n        <a class='btn dashboard__btn' routerLink='/portfolio/profiles/editor'>\r\n            Create Profile\r\n        </a>\r\n        <a class='btn dashboard__btn' routerLink='/portfolio/projects/editor'>\r\n            Create Project\r\n        </a>\r\n        <br>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <h2>Profiles</h2>\r\n        <br>\r\n        <div class='dashboard__profile-btn-row' *ngFor='let profile of profiles trackBy: this.trackingService.objectById'>\r\n            <button\r\n                    aria-label='Activate profile'\r\n                    [ngClass]=\"{'btn--active': profile.status.status == 'ACTIVE' }\"\r\n                    class='btn dashboard__profile-btn'\r\n                    (click)='changeProfile(profile)'\r\n                    type='button'\r\n            >\r\n                {{ profile.name }}\r\n            </button>\r\n\r\n            <a\r\n                    class='btn dashboard__profile-btn--edit'\r\n                    (click)='sendProfileToEditor(profile)'\r\n                    routerLink='/portfolio/profiles/editor'\r\n                    [queryParams]='{type: \"profile\", id: profile.id}'\r\n            >\r\n                &#x270F;\r\n            </a>\r\n            <a\r\n                    class='btn dashboard__profile-btn--edit btn--warn'\r\n                    (click)='deleteProfile(profile)'\r\n            >\r\n                &#x2715;\r\n            </a>\r\n        </div>\r\n\r\n        <br><br>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <div class='section-divider--half'></div>\r\n        <a class='btn dashboard__btn btn--warn' (click)=\"onLogoutClick()\">Logout</a>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AdminComponent } from './admin.component';\r\n\r\nimport {\r\n    DashboardComponent,\r\n    LoginComponent,\r\n    RegisterComponent\r\n} from './components';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AdminComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: DashboardComponent\r\n            },\r\n            {\r\n                path: 'login',\r\n                component: LoginComponent\r\n            },\r\n            {\r\n                path: 'register',\r\n                component: RegisterComponent\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AdminRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { AuthApiService, AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    TrackingService\r\n} from '@ui/core/services';\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus\r\n} from '@ui/modules/portfolio/models';\r\nimport {\r\n    PortfolioApiService, PortfolioComparisonService, PortfolioEditorService,\r\n    PortfolioProfileService\r\n} from '@ui/modules/portfolio/services';\r\n\r\n@Component({\r\n    selector: 'app-dashboard',\r\n    templateUrl: './dashboard.component.html',\r\n    styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n    profiles: PortfolioProfile[];\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authApiService: AuthApiService,\r\n        public authService: AuthService,\r\n        public notificationService: NotificationService,\r\n        private portfolioApiService: PortfolioApiService,\r\n        private portfolioComparisonService: PortfolioComparisonService,\r\n        private portfolioEditorService: PortfolioEditorService,\r\n        private portfolioProfileService: PortfolioProfileService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle(`Admin Dashboard | Matthew Maxwell`);\r\n\r\n        if(this.authService.isLoggedIn()) {\r\n            this.populateProfiles();\r\n        } else {\r\n            this.isLoaded = true;\r\n        }\r\n    }\r\n\r\n    populateProfiles(): void {\r\n        this.portfolioApiService.getProfiles().subscribe((res: PortfolioProfile[]) => {\r\n            this.profiles = res.sort(this.portfolioComparisonService.profiles);\r\n            this.setActiveProfile();\r\n\r\n            this.isLoaded = true;\r\n        });\r\n    }\r\n\r\n    private setActiveProfile(): void {\r\n        const activeProfile = this.profiles.find(p => p.status.status === 'ACTIVE');\r\n        this.portfolioProfileService.setActiveProfile(activeProfile);\r\n    }\r\n\r\n    changeProfile(profile: PortfolioProfile): void {\r\n        if(profile.status.status === 'ACTIVE') return;\r\n\r\n        this.portfolioApiService.activateProfile(profile.id).subscribe((res: PortfolioProfile) => {\r\n            this.portfolioProfileService.setActiveProfile(res);\r\n\r\n            this.modifyProfileStatuses(res.id);\r\n            this.notificationService.createNotification(`Successfully activated the \"${res.name}\" profile!`);\r\n        });\r\n    }\r\n\r\n    private modifyProfileStatuses(activeId: number): void {\r\n        this.profiles.forEach(p => {\r\n            if(p.id === activeId) {\r\n                p.status = new PortfolioProfileStatus({ status: 'ACTIVE' });\r\n            } else {\r\n                p.status = new PortfolioProfileStatus({ status: 'INACTIVE' });\r\n            }\r\n        });\r\n    }\r\n\r\n    onLogoutClick(): void {\r\n        this.authApiService.logoutAdmin().subscribe(res => {\r\n            this.notificationService.createNotification(`Bye, ${this.authService.getAdmin()}!`);\r\n            this.authService.logoutAdmin();\r\n            this.router.navigate(['admin']);\r\n        });\r\n    }\r\n\r\n    sendProfileToEditor(profile: PortfolioProfile): void {\r\n        this.portfolioEditorService.setProfile(profile);\r\n    }\r\n\r\n    deleteProfile(profile: PortfolioProfile): void {\r\n        if(this.profiles.length === 1) {\r\n            this.notificationService.createNotification('Cannot delete only existing profile.');\r\n            return;\r\n        }\r\n\r\n        this.portfolioApiService.deleteProfile(profile.id).subscribe((res: any) => {\r\n            this.profiles = this.profiles.filter(p => p.id !== profile.id);\r\n            this.notificationService.createNotification('Successfully delete profile!');\r\n            if(profile.status.status === 'ACTIVE') location.reload();\r\n        });\r\n    }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthApiService, AuthService } from '@ui/core/auth';\r\nimport { NotificationService, ValidationService } from '@ui/core/services';\r\n\r\nimport { Admin } from '../../interfaces';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    username: string = '';\r\n    password: string = '';\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authApiService: AuthApiService,\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        public validationService: ValidationService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if(this.authService.isLoggedIn()) {\r\n          this.notificationService.createNotification('Already logged in.');\r\n          this.router.navigate(['admin']);\r\n        }\r\n    }\r\n\r\n    onLoginSubmit(): void {\r\n        const admin: Admin = {\r\n            username: this.username,\r\n            password: this.password\r\n        };\r\n\r\n        this.authApiService.loginAdmin(admin).subscribe(res => {\r\n          this.authService.loginAdmin(res.id, res.username);\r\n          this.notificationService.createNotification(`Welcome back, ${res.username}!`);\r\n          this.router.navigate(['admin']);\r\n        });\r\n    }\r\n}\r\n","<div class='section login'>\r\n    <h1 class='login__header'>Login</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='login__form' (ngSubmit)='onLoginSubmit()'>\r\n        <div class='form-field login__form-field'>\r\n            <label>Username</label>\r\n            <br><br>\r\n            <input [(ngModel)]='username' name='username' required autofocus>\r\n        </div>\r\n        <br>\r\n\r\n        <div class='form-field form-field--password login__form-field'>\r\n            <label>Password</label>\r\n            <br><br>\r\n            <input [(ngModel)]='password' name='password' type='password' required>\r\n        </div>\r\n        <br>\r\n            \r\n        <button\r\n            aria-label='Login submit'\r\n            [ngClass]=\"{'btn--inactive': !validationService.hasValidAdminCredentials(username, password)}\"\r\n            class='btn login__form-btn'\r\n            [disabled]='!validationService.hasValidAdminCredentials(username, password)'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthApiService, AuthService } from '@ui/core/auth';\r\nimport { NotificationService, ValidationService } from '@ui/core/services';\r\n\r\nimport { Admin } from '../../interfaces';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n    username: string = '';\r\n    password: string = '';\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authApiService: AuthApiService,\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        public validationService: ValidationService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.notificationService.createNotification('This functionality is not available.');\r\n        this.router.navigate(['admin']);\r\n\r\n        if(this.authService.isLoggedIn()) {\r\n            this.notificationService.createNotification('Already logged in.');\r\n            this.router.navigate(['admin']);\r\n        }\r\n    }\r\n\r\n    onRegisterSubmit(): void {\r\n        const admin: Admin = {\r\n            username: this.username,\r\n            password: this.password\r\n        };\r\n\r\n        this.authApiService.registerAdmin(admin).subscribe(res => {\r\n            this.notificationService.createNotification(`Hello, ${admin.username}! Please log in.`);\r\n            this.router.navigate(['admin/login']);\r\n        });\r\n    }\r\n}\r\n","<div class='section register'>\r\n    <h1 class='register__header'>Register</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='register__form' (ngSubmit)='onRegisterSubmit()'>\r\n        <div class='form-field register__form-field'>\r\n            <label>Username</label>\r\n            <br><br>\r\n            <input [(ngModel)]='username' name='username' required autofocus>\r\n        </div>\r\n        <br>\r\n\r\n        <div class='form-field form-field--password register__form-field'>\r\n            <label>Password</label>\r\n            <br><br>\r\n            <input [(ngModel)]='password' name='password' type='password' required>\r\n        </div>\r\n        <br>\r\n            \r\n        <button\r\n            aria-label='Register submit'\r\n            [ngClass]=\"{'btn--inactive': !validationService.hasValidAdminCredentials(username, password)}\"\r\n            class='btn register__form-btn'\r\n            [disabled]='!validationService.hasValidAdminCredentials(username, password)'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>","import { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CoreModule } from '@ui/core/core.module';\r\n\r\nimport { AdminComponent } from './admin.component';\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\n\r\nimport {\r\n    DashboardComponent,\r\n    LoginComponent,\r\n    RegisterComponent\r\n} from './components';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AdminComponent,\r\n        DashboardComponent,\r\n        LoginComponent,\r\n        RegisterComponent\r\n    ],\r\n    imports: [\r\n        AdminRoutingModule,\r\n        CommonModule,\r\n        CoreModule,\r\n        FormsModule\r\n    ]\r\n})\r\nexport class AdminModule { }","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.scss']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}","<div class=\"app-loading\">\r\n    <div class=\"logo\"></div>\r\n    <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n        <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n</div>","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class PortfolioProfileStatus implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProfileStatus>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    status: string;\r\n}\r\n","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class PortfolioProfileTechnology implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProfileTechnology>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    name: string;\r\n    display_order: number;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nimport { PortfolioProfile } from './portfolio-profile.model';\r\n\r\nexport class PortfolioProject implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProject>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        this.profiles = input.profiles.map(p => new PortfolioProfile({ ...p }).deserialize(p));\r\n\r\n        return this;\r\n    }\r\n\r\n    id?:            number;\r\n\r\n    profiles:       PortfolioProfile[];\r\n\r\n    name:           string;\r\n    tagline:        string;\r\n    description:    string;\r\n\r\n    image_url:      string;\r\n\r\n    link_name:      string;\r\n    link_url:       string;\r\n\r\n    created_at:     Date;\r\n    updated_at:     Date;\r\n}\r\n","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nimport { PortfolioProfileStatus } from './portfolio-profile-status.model';\r\nimport { PortfolioProfileTechnology } from './portfolio-profile-technology.model';\r\nimport { PortfolioProject } from './portfolio-project.model';\r\n\r\nexport class PortfolioProfile implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProfile>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        this.status = input.status.map(s => new PortfolioProfileStatus({ ...s }).deserialize(s));\r\n        this.technologies = input.technologies.map(t => new PortfolioProfileTechnology({ ...t }).deserialize(t));\r\n        this.projects = input.projects.map(p => new PortfolioProject({ ...p }).deserialize(p));\r\n\r\n        return this;\r\n    }\r\n\r\n    id?:             number;\r\n\r\n    status:         PortfolioProfileStatus;\r\n    technologies:   PortfolioProfileTechnology[];\r\n    projects:       PortfolioProject[];\r\n\r\n    name:           string;\r\n    tagline:        string;\r\n    landing:        string;\r\n    about:          string;\r\n    image_url:      string;\r\n\r\n    created_at:      Date;\r\n    updated_at:      Date;\r\n}\r\n"]}