{"version":3,"sources":["webpack:///src/app/modules/portfolio/services/portfolio-api.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-profile.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-editor.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-comparison.service.ts","webpack:///src/app/modules/blog/components/blog-post-collection/blog-post-collection.component.html","webpack:///src/app/modules/blog/components/blog-post-collection/blog-post-collection.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/modules/blog/services/blog-api.service.ts","webpack:///src/app/modules/blog/services/blog-topic.service.ts","webpack:///src/app/modules/blog/services/blog-editor.service.ts","webpack:///src/app/modules/blog/services/blog-comparison.service.ts","webpack:///src/app/modules/blog/blog.component.ts","webpack:///src/app/modules/blog/blog.component.html","webpack:///src/app/modules/blog/models/blog-author.model.ts","webpack:///src/app/modules/blog/models/blog-post-status.model.ts","webpack:///src/app/modules/blog/models/blog-topic.model.ts","webpack:///src/app/modules/blog/models/blog-post.model.ts","webpack:///src/app/modules/blog/components/blog-post-editor/blog-post-editor.component.html","webpack:///src/app/modules/blog/components/blog-post-editor/blog-post-editor.component.ts","webpack:///src/app/modules/blog/components/blog-post-view/blog-post-view.component.html","webpack:///src/app/modules/blog/components/blog-post-view/blog-post-view.component.ts","webpack:///src/app/modules/blog/components/blog-topic-editor/blog-topic-editor.component.html","webpack:///src/app/modules/blog/components/blog-topic-editor/blog-topic-editor.component.ts","webpack:///src/app/modules/blog/components/blog-view/blog-view.component.html","webpack:///src/app/modules/blog/blog-routing.module.ts","webpack:///src/app/modules/blog/components/blog-view/blog-view.component.ts","webpack:///src/app/modules/blog/blog.module.ts"],"names":["PortfolioApiService","PortfolioProfileService","PortfolioEditorService","PortfolioComparisonService","http","profileId","headers","this","contentTypeHeader","put","environment","API_URL","profile","post","id","get","project","super","profiles","p1","p2","name","profileTechnologies","pt1","pt2","display_order","projects","console","log","activeProfile","blogTopicService","BlogPostCollectionComponent","blogComparisonService","seoService","trackingService","baseRoute","nPostsToDisplay","posts","forEach","p","topics","sort","slice","length","getCanonicalUrl","LoadingSpinnerComponent","BlogApiService","BlogTopicService","BlogEditorService","BlogComparisonService","topicId","publishedOnly","params","set","toString","topic","updated_at","t1","t2","activeTopic","BlogComponent","BlogAuthor","partial","Object","assign","input","BlogPostStatus","BlogTopic","author","map","ba","deserialize","status","bps","bt","BlogPostEditorComponent","authService","blogApiService","blogEditorService","notificationService","titleService","validationService","formBuilder","router","authorData","statusData","topicData","isLoaded","setPost","setTitle","checkForAdmin","setPageHideEvent","initPostForm","isLoggedIn","navigate","window","onpagehide","loadPostData","loadAuthorData","loadStatusData","loadTopicData","buildPostForm","postData","getPost","getBlogAuthors","subscribe","res","getPostStatuses","getTopics","setTopicControls","t","associatedTopicIds","control","includes","postForm","controls","push","group","title","required","subtitle","buildAuthorName","array","hasMinElements","preview","content","image_url","first_name","last_name","buildFormPostData","createPost","createNotification","updatePost","buildFormAuthorData","buildFormStatusData","buildFormTopicData","value","find","a","s","idx","filter","BlogPostViewComponent","isAdmin","postId","getIdFromUrl","url","deletePost","BlogTopicEditorComponent","setTopic","initTopicForm","buildTopicForm","getTopic","topicForm","description","createTopic","updateTopic","BlogViewComponent","BlogModule","BlogRoutingModule","routes","path","component","children","portfolioProfileService","activeTopicId","getActiveProfileName","getPosts","getTopicsFromPosts","hasActiveTopic","filterPosts","getActiveTopicId","setActiveTopic","result","error","message","deleteTopic","removeTopic","forChild","forRoot"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus,\r\n    PortfolioProfileTechnology,\r\n    PortfolioProject\r\n} from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    activateProfile(profileId: number): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profileId}/activate`,\r\n            {},\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles`,\r\n            profile,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProfile(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/profiles/${id}`)\r\n    }\r\n\r\n    getProfiles(): Observable<PortfolioProfile[]> {\r\n        return this.http.get<PortfolioProfile[]>(`${environment.API_URL}/portfolio/profiles`);\r\n    }\r\n\r\n    getProfileStatuses(): Observable<PortfolioProfileStatus[]> {\r\n        return this.http.get<PortfolioProfileStatus[]>(`${environment.API_URL}/portfolio/profiles/statuses`);\r\n    }\r\n\r\n    getProfileTechnologies(id: number): Observable<PortfolioProfileTechnology[]> {\r\n        return this.http.get<PortfolioProfileTechnology[]>(`${environment.API_URL}/portfolio/profiles/${id}/technologies`);\r\n    }\r\n\r\n    updateProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profile.id}`,\r\n            profile,\r\n            { headers }\r\n        )\r\n    }\r\n\r\n    createProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProject(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProject(id: number): Observable<PortfolioProject> {\r\n        return this.http.get<PortfolioProject>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProjects(): Observable<PortfolioProject[]> {\r\n        return this.http.get<PortfolioProject[]>(`${environment.API_URL}/portfolio/projects`);\r\n    }\r\n\r\n    updateProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects/${project.id}`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PortfolioProfile } from '@ui/modules/portfolio/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioProfileService {\r\n    private activeProfile: PortfolioProfile;\r\n\r\n    constructor() { }\r\n\r\n    public getActiveProfile(): PortfolioProfile {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    public getActiveProfileName(): string {\r\n        return this.activeProfile ? this.activeProfile.name : 'Software Engineering';\r\n    }\r\n\r\n    public setActiveProfile(profile: PortfolioProfile): void {\r\n        this.activeProfile = profile;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioEditorService extends EditorService {\r\n    private profile: PortfolioProfile;\r\n    private project: PortfolioProject;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getProfile(): PortfolioProfile {\r\n        console.log(this.profile);\r\n        return this.profile;\r\n    }\r\n\r\n    hasProfile(): boolean {\r\n        return this.profile !== undefined;\r\n    }\r\n\r\n    setProfile(profile: PortfolioProfile): void {\r\n        this.profile = profile;\r\n        console.log(this.profile);\r\n    }\r\n\r\n    getProject(): PortfolioProject {\r\n        return this.project;\r\n    }\r\n\r\n    hasProject(): boolean {\r\n        return this.project !== undefined;\r\n    }\r\n\r\n    setProject(project: PortfolioProject): void {\r\n        this.project = project;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProfileTechnology, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    profiles = (p1: PortfolioProfile, p2: PortfolioProfile) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    profileTechnologies = (pt1: PortfolioProfileTechnology, pt2: PortfolioProfileTechnology) => {\r\n        if(pt1.display_order > pt2.display_order) return 1;\r\n        if(pt1.display_order < pt2.display_order) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    projects = (p1: PortfolioProject, p2: PortfolioProject) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","<div class='section posts' *ngIf='posts'>\r\n    <h2 class='posts__header'>Posts</h2>\r\n\r\n    <div class='line-divider'></div>\r\n\r\n    <div class='container posts__post-container'>\r\n            <div class='posts__post' *ngFor='let post of getPosts() trackBy: this.trackingService.objectById; let idx = index' [ngClass]=\"{'posts__post--rjust': idx % 2 !== 0}\">\r\n                <a class=posts__post-anchor-wrapper [routerLink]=\"[this.getPostUrl(post.id, post.title)]\">\r\n                    <h3 class='posts__post-title' *ngIf='post.status.status === \"PUBLISHED\"'>{{ post.title }}</h3>\r\n                    <h3 class='posts__post-title' *ngIf='post.status.status !== \"PUBLISHED\"'>{{ post.status.status + \": \" + post.title }}</h3>\r\n\r\n                    <h4 class='posts__post-subtitle'>{{ post.subtitle }}</h4>\r\n                </a>\r\n\r\n\r\n                <div class='posts__post-topic-list' *ngIf='showTopics'>\r\n                    <a\r\n                            class='posts__post-topic-item'\r\n                            *ngFor='let topic of post.topics'\r\n                            (click)='blogTopicService.setActiveTopic(topic)'\r\n                            [routerLink]=\"['/blog']\"\r\n                    >\r\n                        {{ topic.name }}\r\n                    </a>\r\n                </div>\r\n\r\n                <p class='posts__post-preview' *ngIf='showPreview'>\r\n                    {{ post.preview.split(' ').slice(0, 44).join(' ') }} ...\r\n                </p>\r\n\r\n                <p class='posts__post-date' [innerHTML]='seoService.getFormattedDate(post.updated_at)'></p>\r\n            </div>\r\n    </div>\r\n\r\n    <button\r\n        aria-label='Display more posts'\r\n        [ngClass]=\"{'btn--hide': nPostsToDisplay >= posts.length}\"\r\n        class='btn posts__load-btn'\r\n        (click)='displayMorePosts()'\r\n    >\r\n        Load More\r\n    </button>\r\n\r\n    <a\r\n        *ngIf='showReadmore'\r\n        class='btn posts__readmore-btn'\r\n        routerLink='/blog'\r\n    >\r\n        See Blog\r\n    </a>\r\n</div>","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { SeoService, TrackingService } from '@ui/core/services';\r\n\r\nimport { BlogPost } from '../../models';\r\nimport { BlogComparisonService, BlogTopicService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-post-collection',\r\n    templateUrl: './blog-post-collection.component.html',\r\n    styleUrls: ['./blog-post-collection.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BlogPostCollectionComponent implements OnInit {\r\n    @Input() posts: BlogPost[];\r\n    \r\n    @Input() showPreview: boolean;\r\n    @Input() showTopics: boolean;\r\n    @Input() showReadmore: boolean;\r\n\r\n    // CAUTION: This is necessary because the routing changes when this component is used outside of the blog module\r\n    @Input() baseRoute: string = 'blog/posts';\r\n\r\n    nPostsToDisplay: number = 5;\r\n\r\n    constructor(\r\n        private blogComparisonService: BlogComparisonService,\r\n        public blogTopicService: BlogTopicService,\r\n        public seoService: SeoService,\r\n        public trackingService: TrackingService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.posts.forEach(p => {\r\n            p.topics.sort(this.blogComparisonService.topics);\r\n        });\r\n    }\r\n\r\n    getPosts(): BlogPost[] {\r\n        return this.posts.slice(0, this.nPostsToDisplay);\r\n    }\r\n\r\n    displayMorePosts(): void {\r\n       this.nPostsToDisplay += 5;\r\n\r\n        if(this.nPostsToDisplay >= this.posts.length) {\r\n            this.nPostsToDisplay = this.posts.length;\r\n        }\r\n    }\r\n\r\n    getPostUrl(id: number, name: string): string {\r\n        return `${this.baseRoute}/${this.seoService.getCanonicalUrl(id, name)}`;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.scss']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}","<div class=\"app-loading\">\r\n    <div class=\"logo\"></div>\r\n    <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n        <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n</div>","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport { BlogAuthor, BlogPost, BlogPostStatus, BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    getBlogAuthors(): Observable<BlogAuthor[]> {\r\n        return this.http.get<BlogAuthor[]>(`${environment.API_URL}/blog/authors`);\r\n    }\r\n\r\n    createPost(post: BlogPost): Observable<BlogPost> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<BlogPost>(\r\n            `${environment.API_URL}/blog/posts`,\r\n            post,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deletePost(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/blog/posts/${id}`);\r\n    }\r\n\r\n    getPost(id: number): Observable<BlogPost> {\r\n        return this.http.get<BlogPost>(`${environment.API_URL}/blog/posts/${id}`);\r\n    }\r\n\r\n    getPosts(topicId: number = -1, publishedOnly: boolean = true): Observable<BlogPost[]> {\r\n        let params = new HttpParams();\r\n\r\n        if(topicId != -1) params = params.set('topic_id', topicId.toString());\r\n        if(publishedOnly) params = params.set('published', 'true');\r\n\r\n        return this.http.get<BlogPost[]>(\r\n            `${environment.API_URL}/blog/posts`,\r\n            { params: params }\r\n        );\r\n    }\r\n\r\n    getPostStatuses(): Observable<BlogPostStatus[]> {\r\n        return this.http.get<BlogPostStatus[]>(`${environment.API_URL}/blog/posts/statuses`);\r\n    }\r\n\r\n    updatePost(post: BlogPost): Observable<BlogPost> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<BlogPost>(\r\n            `${environment.API_URL}/blog/posts/${post.id}`,\r\n            post,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createTopic(topic: BlogTopic): Observable<BlogTopic> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<BlogTopic>(\r\n            `${environment.API_URL}/blog/topics`,\r\n            topic,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteTopic(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/blog/topics/${id}`);\r\n    }\r\n\r\n    getTopics(): Observable<BlogTopic[]> {\r\n        return this.http.get<BlogTopic[]>(`${environment.API_URL}/blog/topics`);\r\n    }\r\n\r\n    updateTopic(topic: BlogTopic): Observable<BlogTopic> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<BlogTopic>(\r\n            `${environment.API_URL}/blog/topics/${topic.id}`,\r\n            topic,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class BlogTopicService {\r\n    private activeTopic: BlogTopic;\r\n\r\n    constructor() { }\r\n\r\n    getActiveTopicId(): number {\r\n        if(!this.activeTopic) return -1;\r\n        return this.activeTopic.id;\r\n    }\r\n\r\n    hasActiveTopic(): boolean {\r\n        return (this.activeTopic !== undefined);\r\n    }\r\n\r\n    setActiveTopic(topic: BlogTopic): void {\r\n        this.activeTopic = topic;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { BlogPost, BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogEditorService extends EditorService {\r\n    private post: BlogPost;\r\n    private topic: BlogTopic;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getPost(): BlogPost {\r\n        return this.post;\r\n    }\r\n\r\n    hasPost(): boolean {\r\n        return this.post !== undefined;\r\n    }\r\n\r\n    setPost(post: BlogPost): void {\r\n        this.post = post;\r\n    }\r\n\r\n    getTopic(): BlogTopic {\r\n        return this.topic;\r\n    }\r\n\r\n    hasTopic(): boolean {\r\n        return this.topic !== undefined;\r\n    }\r\n\r\n    setTopic(topic: BlogTopic): void {\r\n        this.topic = topic;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { BlogPost, BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    posts = (p1: BlogPost, p2: BlogPost) => {\r\n        if(p1.updated_at < p2.updated_at) return 1;\r\n        if(p1.updated_at > p2.updated_at) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    topics = (t1: BlogTopic, t2: BlogTopic) => {\r\n        if(t1.name > t2.name) return 1;\r\n        if(t1.name < t2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-blog',\r\n    templateUrl: './blog.component.html'\r\n})\r\nexport class BlogComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}","<router-outlet></router-outlet>","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class BlogAuthor implements Deserializable {\r\n    constructor(partial: Partial<BlogAuthor>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    first_name: string;\r\n    last_name: string;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class BlogPostStatus implements Deserializable {\r\n    constructor(partial: Partial<BlogPostStatus>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    status: string;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class BlogTopic implements Deserializable {\r\n    constructor(partial: Partial<BlogTopic>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    name: string;\r\n    description: string;\r\n\r\n    created_at: Date;\r\n    updated_at: Date;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nimport { BlogAuthor } from './blog-author.model';\r\nimport { BlogPostStatus } from './blog-post-status.model';\r\nimport { BlogTopic } from './blog-topic.model';\r\n\r\nexport class BlogPost implements Deserializable {\r\n    constructor(partial: Partial<BlogPost>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        this.author = input.author.map(ba => new BlogAuthor({ ...ba }).deserialize(ba));\r\n        this.status = input.status.map(bps => new BlogPostStatus({ ...bps }).deserialize(bps));\r\n\r\n        this.topics = input.topics.map(bt => new BlogTopic({ ...bt }).deserialize(bt));\r\n\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    author: BlogAuthor;\r\n    status: BlogPostStatus;\r\n\r\n    topics?: BlogTopic[];\r\n\r\n    title: string;\r\n    subtitle: string;\r\n    preview: string;\r\n    content: string;\r\n    image_url: string;\r\n\r\n    created_at:      Date;\r\n    updated_at:      Date;\r\n}","<div class='section editor' *ngIf='isLoaded; else loading'>\r\n    <h1 class='editor__header'>Post Editor</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='editor__form' [formGroup]='postForm' (ngSubmit)='onSubmit()'>\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Title</label>\r\n            <br><br>\r\n            <input formControlName='title' required autofocus>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Subtitle</label>\r\n            <br><br>\r\n            <input formControlName='subtitle' required autofocus>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Author</label>\r\n            <br><br>\r\n            <mat-radio-group formControlName='author' name='author' required>\r\n                <mat-radio-button\r\n                    *ngFor='let author of authorData trackBy: this.trackingService.objectById'\r\n                    [value]='buildAuthorName(author)'\r\n                >{{ buildAuthorName(author) }}</mat-radio-button>\r\n            </mat-radio-group>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Status</label>\r\n            <br><br>\r\n            <mat-radio-group formControlName='status' name='status' required>\r\n                <mat-radio-button\r\n                        *ngFor='let status of statusData trackBy: this.trackingService.objectById'\r\n                        [value]='status.status'\r\n                >{{ status.status }}</mat-radio-button>\r\n            </mat-radio-group>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Topics</label>\r\n            <br><br>\r\n            <div class='form__checkbox-item' formArrayName='topics' *ngFor='let topic of postForm.controls.topics[\"controls\"] trackBy: this.trackingService.objectById; let idx = index'>\r\n                <mat-checkbox [formControlName]='idx'>{{ topicData[idx].name }}</mat-checkbox>\r\n                <br>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Preview</label>\r\n            <br><br>\r\n            <textarea formControlName='preview' required></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-field form-field--large editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Content</label>\r\n            <br><br>\r\n            <textarea formControlName='content' required></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Image URL</label>\r\n            <br><br>\r\n            <input formControlName='image_url' required>\r\n        </div>\r\n\r\n        <button\r\n            aria-label='Submit post'\r\n            [ngClass]=\"{'btn--inactive': !postForm.valid}\"\r\n            class='btn editor__form-btn editor__form-btn--submit'\r\n            [disabled]='!postForm.valid'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { Component, OnDestroy, OnInit, Input } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    ValidationService,\r\n    SeoService, TrackingService\r\n} from '@ui/core/services';\r\n\r\nimport { BlogPost, BlogTopic, BlogPostStatus, BlogAuthor } from '../../models';\r\nimport { BlogApiService, BlogEditorService, BlogComparisonService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-post-editor',\r\n    templateUrl: './blog-post-editor.component.html'\r\n})\r\nexport class BlogPostEditorComponent implements OnDestroy, OnInit {\r\n    postData: BlogPost;\r\n    authorData: BlogAuthor[] = [];\r\n    statusData: BlogPostStatus[] = [];\r\n    topicData: BlogTopic[] = [];\r\n\r\n    postForm: FormGroup;\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogEditorService: BlogEditorService,\r\n        private blogComparisonService: BlogComparisonService,\r\n        private notificationService: NotificationService,\r\n        private seoService: SeoService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService,\r\n        private validationService: ValidationService,\r\n        private formBuilder: FormBuilder,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnDestroy(): void {\r\n        this.blogEditorService.setPost(null);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle('Blog Post Editor | Matthew Maxwell');\r\n\r\n        this.checkForAdmin();\r\n\r\n        this.setPageHideEvent();\r\n\r\n        this.initPostForm();\r\n    }\r\n\r\n    private checkForAdmin(): void {\r\n        if(!this.authService.isLoggedIn())\r\n            this.router.navigate(['']);\r\n    }\r\n\r\n    private setPageHideEvent(): void {\r\n        window.onpagehide = () => {\r\n            this.blogEditorService.setPost(null);\r\n        };\r\n    }\r\n\r\n    private initPostForm(): void {\r\n        this.loadPostData();\r\n        this.loadAuthorData();\r\n        this.loadStatusData();\r\n        this.loadTopicData();\r\n\r\n        this.buildPostForm();\r\n    }\r\n\r\n    private loadPostData(): void {\r\n        this.postData = this.blogEditorService.getPost();\r\n    }\r\n\r\n    private loadAuthorData(): void {\r\n        this.blogApiService.getBlogAuthors().subscribe((res: BlogAuthor[]) => {\r\n            this.authorData = res;\r\n        });\r\n    }\r\n\r\n    private loadStatusData(): void {\r\n        this.blogApiService.getPostStatuses().subscribe((res: BlogPostStatus[]) => {\r\n            this.statusData = res;\r\n        })\r\n    }\r\n\r\n    private loadTopicData(): void {\r\n        this.blogApiService.getTopics().subscribe((res: BlogTopic[]) => {\r\n            this.topicData = res.sort(this.blogComparisonService.topics);\r\n\r\n            if(this.postData) {\r\n                this.setTopicControls(this.postData.topics.map(t => t.id));\r\n            } else {\r\n                this.setTopicControls([]);\r\n            }\r\n\r\n            this.isLoaded = true;\r\n        });\r\n    }\r\n\r\n    private setTopicControls(associatedTopicIds: number[]): void {\r\n        this.topicData.forEach(t => {\r\n            const control: FormControl = this.formBuilder.control(associatedTopicIds.includes(t.id));\r\n            (this.postForm.controls.topics as FormArray).push(control);\r\n        });\r\n    }\r\n\r\n    private buildPostForm(): void {\r\n        if(this.postData) {\r\n            this.postForm = this.formBuilder.group({\r\n                title:      this.formBuilder.control(this.postData.title,                        [Validators.required]),\r\n                subtitle:   this.formBuilder.control(this.postData.subtitle,                     [Validators.required]),\r\n                author:     this.formBuilder.control(this.buildAuthorName(this.postData.author), [Validators.required]),\r\n                status:     this.formBuilder.control(this.postData.status.status,                [Validators.required]),\r\n                topics:     this.formBuilder.array  (this.topicData,                             [this.validationService.hasMinElements(1)]),\r\n                preview:    this.formBuilder.control(this.postData.preview,                      [Validators.required]),\r\n                content:    this.formBuilder.control(this.postData.content,                      [Validators.required]),\r\n                image_url:  this.formBuilder.control(this.postData.image_url,                    [Validators.required])\r\n            });\r\n        } else {\r\n            this.postForm = this.formBuilder.group({\r\n                title:      this.formBuilder.control('',                [Validators.required]),\r\n                subtitle:   this.formBuilder.control('',                [Validators.required]),\r\n                author:     this.formBuilder.control('Matthew Maxwell', [Validators.required]),\r\n                status:     this.formBuilder.control('DRAFT',           [Validators.required]),\r\n                topics:     this.formBuilder.array  ([],                [this.validationService.hasMinElements(1)]),\r\n                preview:    this.formBuilder.control('',                [Validators.required]),\r\n                content:    this.formBuilder.control('',                [Validators.required]),\r\n                image_url:  this.formBuilder.control('',                [Validators.required])\r\n            });\r\n        }\r\n    }\r\n\r\n    buildAuthorName(author: BlogAuthor): string {\r\n        return `${author.first_name} ${author.last_name}`;\r\n    }\r\n\r\n    onSubmit(): void {\r\n        const post = this.buildFormPostData();\r\n\r\n        if(post.id === undefined) {\r\n            this.blogApiService.createPost(post).subscribe((res: BlogPost) => {\r\n                this.notificationService.createNotification('Successfully created new post!');\r\n                this.router.navigate([`blog/posts/${this.seoService.getCanonicalUrl(res.id, res.title)}`]);\r\n            });\r\n        } else {\r\n            this.blogApiService.updatePost(post).subscribe((res: BlogPost) => {\r\n                this.notificationService.createNotification('Successfully updated existing post!');\r\n                this.router.navigate([`blog/posts/${this.seoService.getCanonicalUrl(res.id, res.title)}`]);\r\n            });\r\n        }\r\n    }\r\n\r\n    private buildFormPostData(): BlogPost {\r\n        const author = this.buildFormAuthorData();\r\n        const status = this.buildFormStatusData();\r\n        const topics = this.buildFormTopicData();\r\n\r\n        return new BlogPost({\r\n            ...this.postForm.value,\r\n            id: this.postData ? this.postData.id : undefined,\r\n            author: author,\r\n            status: status,\r\n            topics: topics\r\n        });\r\n    }\r\n\r\n    private buildFormAuthorData(): BlogAuthor {\r\n        return this.authorData.find(a => this.buildAuthorName(a) === this.postForm.value.author);\r\n    }\r\n\r\n    private buildFormStatusData(): BlogPostStatus {\r\n        return this.statusData.find(s => s.status === this.postForm.value.status);\r\n    }\r\n\r\n    private buildFormTopicData(): BlogTopic[] {\r\n        return this.postForm.value.topics.map((t, idx) => {\r\n            if(t) return this.topicData[idx];\r\n        }).filter(t => t !== undefined);\r\n    }\r\n}\r\n","<div class='section post' *ngIf='isLoaded; else loading'>\r\n    <h1 class='post__title' *ngIf='post.status.status === \"PUBLISHED\"'>{{ post.title }}</h1>\r\n    <h1 class='post__title' *ngIf='post.status.status !== \"PUBLISHED\"'>{{ post.status.status + \": \" + post.title }}</h1>\r\n\r\n    <h2 class='post__subtitle'>{{ post.subtitle }}</h2>\r\n\r\n    <div class='post__btn-container' *ngIf='isAdmin'>\r\n        <a class='btn post__btn' (click)='sendPostToEditor()' routerLink='/blog/posts/editor'>\r\n            &#x270F;\r\n        </a>\r\n        <a class='btn post__btn btn--warn' (click)='deletePost(post.id)' routerLink='/blog'>\r\n            &#x2715;\r\n        </a>\r\n    </div>\r\n    \r\n    <p class='post__date' [innerHtml]='\"Updated: \" + seoService.getFormattedDate(post.updated_at)'></p>\r\n    \r\n    <div class='post__topic-container'>\r\n        <a class='post__topic-item' (click)='blogTopicService.setActiveTopic(topic)' [routerLink]=\"['/blog']\" *ngFor='let topic of post.topics trackBy: this.trackingService.objectById'>\r\n            {{ topic.name }}\r\n        </a>\r\n    </div>\r\n\r\n    <div class=\"line-divider\"></div>\r\n    \r\n    <div class='post__image-container'>\r\n        <picture>\r\n            <source [srcset]=\"post.image_url\" type=\"image/webp\">\r\n            <source [srcset]=\"post.image_url.substring(0, post.image_url.length - 4) + 'png'\" type=\"image/png\">\r\n            <img class='post__image' alt='Blog post image' [src]='post.image_url.substring(0, post.image_url.length - 4) + \"png\"'>\r\n        </picture>\r\n    </div>\r\n\r\n    <markdown [data]='post.content'></markdown>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    SeoService,\r\n    TrackingService\r\n} from '@ui/core/services';\r\n\r\nimport { BlogPost } from '../../models';\r\nimport { BlogApiService, BlogEditorService, BlogComparisonService, BlogTopicService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-post-view',\r\n    templateUrl: './blog-post-view.component.html',\r\n    styleUrls: ['./blog-post-view.component.scss']\r\n})\r\nexport class BlogPostViewComponent implements OnInit {\r\n    isAdmin: boolean = false;\r\n    isLoaded: boolean = false;\r\n\r\n    post: BlogPost;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogEditorService: BlogEditorService,\r\n        private blogComparisonService: BlogComparisonService,\r\n        public blogTopicService: BlogTopicService,\r\n        private notificationService: NotificationService,\r\n        public seoService: SeoService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isAdmin = this.authService.isLoggedIn();\r\n\r\n        const postId = this.seoService.getIdFromUrl(this.router.url);\r\n        if(!postId) {\r\n            this.notificationService.createNotification('Unable to find post ID.');\r\n            this.router.navigate(['']);\r\n            return;\r\n        }\r\n\r\n        this.blogApiService.getPost(postId).subscribe((res: BlogPost) => {\r\n            if(res.status.status !== 'PUBLISHED' && !this.isAdmin) {\r\n                this.notificationService.createNotification('Unable to view the blog post.');\r\n                this.router.navigate(['']);\r\n            }\r\n\r\n            this.titleService.setTitle(`${res.title} | Blog | Matthew Maxwell`);\r\n\r\n            this.post = res;\r\n            this.post.topics.sort(this.blogComparisonService.topics);\r\n\r\n            this.isLoaded = true;\r\n        });\r\n    }\r\n\r\n    sendPostToEditor(): void {\r\n        this.blogEditorService.setPost(this.post);\r\n    }\r\n\r\n    deletePost(id: number): void {\r\n        this.blogApiService.deletePost(id).subscribe((res: any) => {\r\n            this.notificationService.createNotification('Successfully deleted blog post!');\r\n            this.router.navigate(['/blog']);\r\n        });\r\n    }\r\n}\r\n","<div class='section editor topic-editor' *ngIf='isLoaded; else loading'>\r\n    <h1 class='editor__header'>Topic Editor</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='editor__form' [formGroup]='topicForm' (ngSubmit)='onSubmit()'>\r\n        <div class='form-field editor__form-field'>\r\n            <label class='form-field-label editor__form-field-label'>Name</label>\r\n            <br><br>\r\n            <input formControlName='name' required autofocus>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Description</label>\r\n            <br><br>\r\n            <input formControlName='description' required>\r\n        </div>\r\n\r\n        <button\r\n            aria-label='Submit topic'\r\n            [ngClass]=\"{'btn--inactive': !topicForm.valid}\"\r\n            class='btn editor__form-btn  editor__form-btn--submit'\r\n            [disabled]='!topicForm.valid'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport { NotificationService } from '@ui/core/services';\r\n\r\nimport { BlogTopic } from '../../models';\r\nimport { BlogApiService, BlogEditorService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-topic-editor',\r\n    templateUrl: './blog-topic-editor.component.html'\r\n})\r\nexport class BlogTopicEditorComponent implements OnInit, OnDestroy {\r\n    topicData: BlogTopic;\r\n    topicForm: FormGroup;\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogEditorService: BlogEditorService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private titleService: Title,\r\n        private router: Router,\r\n    ) { }\r\n\r\n    ngOnDestroy(): void {\r\n        this.blogEditorService.setTopic(null);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle('Blog Topic Editor | Matthew Maxwell');\r\n\r\n        this.checkForAdmin();\r\n\r\n        this.setPageHideEvent();\r\n\r\n        this.initTopicForm();\r\n    }\r\n\r\n    private checkForAdmin(): void {\r\n        if(!this.authService.isLoggedIn())\r\n            this.router.navigate(['']);\r\n    }\r\n\r\n    private setPageHideEvent(): void {\r\n        window.onpagehide = () => {\r\n            this.blogEditorService.setTopic(null);\r\n        };\r\n    }\r\n\r\n    private initTopicForm(): void {\r\n        this.loadTopicData();\r\n\r\n        this.buildTopicForm();\r\n    }\r\n\r\n    private loadTopicData(): void {\r\n        this.topicData = this.blogEditorService.getTopic();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    private buildTopicForm(): void {\r\n        if(this.topicData) {\r\n            this.topicForm = this.formBuilder.group({\r\n                name:        this.formBuilder.control(this.topicData.name,        [Validators.required]),\r\n                description: this.formBuilder.control(this.topicData.description, [Validators.required]),\r\n            });\r\n        } else {\r\n            this.topicForm = this.formBuilder.group({\r\n                name:        this.formBuilder.control('', [Validators.required]),\r\n                description: this.formBuilder.control('', [Validators.required]),\r\n            });\r\n        }\r\n    }\r\n\r\n    onSubmit(): void {\r\n        const topic = this.buildFormTopicData();\r\n\r\n        if(topic.id === undefined) {\r\n            this.blogApiService.createTopic(topic).subscribe((res: BlogTopic) => {\r\n                this.notificationService.createNotification('Successfully created new topic.');\r\n                this.router.navigate(['blog'])\r\n            });\r\n        } else {\r\n            this.blogApiService.updateTopic(topic).subscribe((res: BlogTopic) => {\r\n                this.notificationService.createNotification('Successfully updated existing topic.');\r\n                this.router.navigate(['blog'])\r\n            });\r\n        }\r\n    }\r\n\r\n    buildFormTopicData(): BlogTopic {\r\n        return new BlogTopic({\r\n            ...this.topicForm.value,\r\n            id: this.topicData ? this.topicData.id : undefined\r\n        });\r\n    }\r\n}\r\n","<div class='blog' *ngIf='isLoaded; else loading'>\r\n    <h1 class='blog__header'>Welcome to my blog!</h1>\r\n\r\n    <div class='section topics'>\r\n        <h2 class='blog__filter-header'>Topics</h2>\r\n\r\n        <div class='line-divider'></div>\r\n\r\n        <div class='blog__filter-btn-container'>\r\n            <div class='blog__filter-btn-row blog__filter-btn-row--all'>\r\n                <button\r\n                        aria-label='Select all topics'\r\n                        [ngClass]=\"{'btn--active': activeTopicId === -1, 'blog__filter-btn--half': isAdmin}\"\r\n                        class='btn blog__filter-btn blog__filter-btn--all'\r\n                        (click)='filterPosts(-1)'\r\n                        type='button'\r\n                >\r\n                    All\r\n                </button>\r\n\r\n                <ng-container *ngIf='isAdmin'>\r\n                    <button aria-label='Edit blog topic' class='btn blog__filter-btn--add btn--go' routerLink='/blog/topics/editor'>\r\n                        &#x2b;\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n\r\n            <div class='blog__filter-btn-row' *ngFor='let topic of topics trackBy: this.trackingService.objectById'>\r\n                <button\r\n                    aria-label='Filter blog topic'\r\n                    [ngClass]=\"{'btn--active': topic.id === activeTopicId, 'blog__filter-btn--half': isAdmin}\"\r\n                    class='btn blog__filter-btn'\r\n                    (click)='filterPosts(topic.id)'\r\n                    type='button'\r\n                >\r\n                    {{ topic.name }}\r\n                </button>\r\n    \r\n                <ng-container *ngIf='isAdmin'>\r\n                    <button\r\n                            aria-label='Edit blog topic'\r\n                            class='btn blog__filter-btn--edit'\r\n                            (click)='sendTopicToEditor(topic)'\r\n                            routerLink='/blog/topics/editor'\r\n                    >\r\n                        &#x270F;\r\n                    </button>\r\n                    <button\r\n                            aria-label='Delete blog topic'\r\n                            class='btn blog__filter-btn--edit btn--warn'\r\n                            (click)='deleteTopic(topic)'\r\n                            type='button'\r\n                    >\r\n                        &#x2715;\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n    <app-blog-post-collection [posts]='posts' [showPreview]='true' baseRoute='posts/'></app-blog-post-collection>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { BlogComponent } from './blog.component';\r\n\r\nimport {\r\n    BlogPostEditorComponent,\r\n    BlogPostViewComponent,\r\n    BlogTopicEditorComponent,\r\n    BlogViewComponent\r\n} from './components';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: BlogComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: BlogViewComponent\r\n            },\r\n            {\r\n                path: 'posts/editor',\r\n                component: BlogPostEditorComponent\r\n            },\r\n            {\r\n                path: 'posts/:id/:uri',\r\n                component: BlogPostViewComponent\r\n            },\r\n            {\r\n                path: 'topics/editor',\r\n                component: BlogTopicEditorComponent\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class BlogRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    TrackingService\r\n} from '@ui/core/services';\r\nimport { PortfolioProfileService } from '@ui/modules/portfolio/services';\r\n\r\nimport { BlogPost, BlogTopic } from '../../models';\r\nimport {\r\n    BlogApiService,\r\n    BlogComparisonService,\r\n    BlogEditorService,\r\n    BlogTopicService\r\n} from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-view',\r\n    templateUrl: './blog-view.component.html',\r\n    styleUrls: ['./blog-view.component.scss']\r\n})\r\nexport class BlogViewComponent implements OnInit {\r\n    isAdmin: boolean = false;\r\n    isLoaded: boolean = false;\r\n\r\n    posts: BlogPost[];\r\n    topics: BlogTopic[];\r\n\r\n    activeTopicId: number = -1;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogComparisonService: BlogComparisonService,\r\n        private blogEditorService: BlogEditorService,\r\n        public blogTopicService: BlogTopicService,\r\n        private notificationService: NotificationService,\r\n        private portfolioProfileService: PortfolioProfileService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle(`${this.portfolioProfileService.getActiveProfileName()} Blog | Matthew Maxwell`);\r\n\r\n        this.isAdmin = this.authService.isLoggedIn();\r\n\r\n        if(this.isAdmin) {\r\n            this.blogApiService.getPosts(this.activeTopicId, false).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.topics = this.getTopicsFromPosts().sort(this.blogComparisonService.topics);\r\n\r\n                if(this.blogTopicService.hasActiveTopic()) {\r\n                    this.filterPosts(this.blogTopicService.getActiveTopicId());\r\n                    this.blogTopicService.setActiveTopic(null);\r\n                    this.blogTopicService.getActiveTopicId();\r\n                }\r\n\r\n                this.isLoaded = true;\r\n            });\r\n        } else {\r\n            this.blogApiService.getPosts(this.activeTopicId).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.topics = this.getTopicsFromPosts().sort(this.blogComparisonService.topics);\r\n\r\n                if(this.blogTopicService.hasActiveTopic()) {\r\n                    this.filterPosts(this.blogTopicService.getActiveTopicId());\r\n                    this.blogTopicService.setActiveTopic(null);\r\n                }\r\n\r\n                this.isLoaded = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    private getTopicsFromPosts(): BlogTopic[] {\r\n        let result: BlogTopic[] = [];\r\n\r\n        this.posts.forEach(p => {\r\n            p.topics.forEach(t => {\r\n                if(!result.map(bt => bt.id).includes(t.id)) result.push(t);\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    filterPosts(topicId: number): void {\r\n        if(this.isAdmin) {\r\n            this.blogApiService.getPosts(topicId, false).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.activeTopicId = topicId;\r\n            });\r\n        } else {\r\n            this.blogApiService.getPosts(topicId).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.activeTopicId = topicId;\r\n            }, (error: HttpErrorResponse) => {\r\n                this.notificationService.createNotification(error.error.message);\r\n            });\r\n        }\r\n    }\r\n\r\n    sendTopicToEditor(topic: BlogTopic): void {\r\n        this.blogEditorService.setTopic(topic);\r\n    }\r\n\r\n    deleteTopic(topic: BlogTopic): void {\r\n        this.blogApiService.deleteTopic(topic.id).subscribe((res: any) => {\r\n            this.removeTopic(topic.id);\r\n            this.notificationService.createNotification('Successfully deleted blog topic!');\r\n            this.filterPosts(-1);\r\n        }, (error: HttpErrorResponse) => {\r\n            this.notificationService.createNotification(error.error.message);\r\n        });\r\n    }\r\n\r\n    private removeTopic(id: number): void {\r\n        this.topics = this.topics.filter(t => t.id != id);\r\n\r\n        this.posts = this.posts.filter(p => !p.topics.map(t => t.id).includes(id));\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MarkdownModule } from 'ngx-markdown';\r\n\r\nimport { CoreModule } from '@ui/core/core.module';\r\nimport { MaterialModule } from '@ui/modules/material/material.module';\r\n\r\nimport { BlogComponent } from './blog.component';\r\nimport { BlogRoutingModule } from './blog-routing.module';\r\n\r\nimport {\r\n    BlogPostCollectionComponent,\r\n    BlogPostEditorComponent,\r\n    BlogPostViewComponent,\r\n    BlogTopicEditorComponent,\r\n    BlogViewComponent\r\n} from './components';\r\nimport {\r\n    BlogApiService,\r\n    BlogComparisonService\r\n} from './services';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        BlogComponent,\r\n        BlogPostCollectionComponent,\r\n        BlogPostEditorComponent,\r\n        BlogPostViewComponent,\r\n        BlogTopicEditorComponent,\r\n        BlogViewComponent\r\n    ],\r\n    imports: [\r\n        BlogRoutingModule,\r\n        CommonModule,\r\n        CoreModule,\r\n        MarkdownModule.forRoot(),\r\n        MaterialModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        BlogPostCollectionComponent\r\n    ],\r\n    providers: [\r\n        BlogApiService,\r\n        BlogComparisonService\r\n    ]\r\n})\r\nexport class BlogModule { }"]}