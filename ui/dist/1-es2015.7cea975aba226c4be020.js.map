{"version":3,"sources":["webpack:///src/app/modules/portfolio/services/portfolio-api.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-comparison.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-editor.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-profile.service.ts","webpack:///src/app/modules/blog/components/blog-post-collection/blog-post-collection.component.html","webpack:///src/app/modules/blog/components/blog-post-collection/blog-post-collection.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/modules/blog/services/blog-api.service.ts","webpack:///src/app/modules/blog/services/blog-comparison.service.ts","webpack:///src/app/modules/blog/services/blog-editor.service.ts","webpack:///src/app/modules/blog/services/blog-topic.service.ts","webpack:///src/app/modules/blog/blog.component.ts","webpack:///src/app/modules/blog/blog.component.html","webpack:///src/app/modules/blog/models/blog-author.model.ts","webpack:///src/app/modules/blog/models/blog-post-status.model.ts","webpack:///src/app/modules/blog/models/blog-topic.model.ts","webpack:///src/app/modules/blog/models/blog-post.model.ts","webpack:///src/app/modules/blog/components/blog-post-editor/blog-post-editor.component.html","webpack:///src/app/modules/blog/components/blog-post-editor/blog-post-editor.component.ts","webpack:///src/app/modules/blog/components/blog-post-view/blog-post-view.component.html","webpack:///src/app/modules/blog/components/blog-post-view/blog-post-view.component.ts","webpack:///src/app/modules/blog/components/blog-topic-editor/blog-topic-editor.component.html","webpack:///src/app/modules/blog/components/blog-topic-editor/blog-topic-editor.component.ts","webpack:///src/app/modules/blog/components/blog-view/blog-view.component.html","webpack:///src/app/modules/blog/blog-routing.module.ts","webpack:///src/app/modules/blog/components/blog-view/blog-view.component.ts","webpack:///src/app/modules/blog/blog.module.ts"],"names":["PortfolioApiService","http","super","profileId","headers","this","contentTypeHeader","put","environment","API_URL","profile","post","id","delete","get","project","PortfolioComparisonService","profiles","p1","p2","name","profileTechnologies","pt1","pt2","display_order","projects","PortfolioEditorService","console","log","undefined","PortfolioProfileService","activeProfile","blogTopicService","BlogPostCollectionComponent","blogComparisonService","seoService","trackingService","baseRoute","nPostsToDisplay","posts","forEach","p","topics","sort","slice","length","getCanonicalUrl","LoadingSpinnerComponent","BlogApiService","topicId","publishedOnly","params","set","toString","topic","BlogComparisonService","updated_at","t1","t2","BlogEditorService","BlogTopicService","activeTopic","BlogComponent","BlogAuthor","partial","Object","assign","input","BlogPostStatus","BlogTopic","author","map","ba","deserialize","status","bps","bt","BlogPostEditorComponent","authService","blogApiService","blogEditorService","notificationService","titleService","validationService","formBuilder","router","authorData","statusData","topicData","isLoaded","setPost","setTitle","checkForAdmin","setPageHideEvent","initPostForm","isLoggedIn","navigate","window","onpagehide","loadPostData","loadAuthorData","loadStatusData","loadTopicData","buildPostForm","postData","getPost","getBlogAuthors","subscribe","res","getPostStatuses","getTopics","setTopicControls","t","associatedTopicIds","control","includes","postForm","controls","push","group","title","required","subtitle","buildAuthorName","array","hasMinElements","preview","content","image_url","first_name","last_name","buildFormPostData","createPost","createNotification","updatePost","buildFormAuthorData","buildFormStatusData","buildFormTopicData","value","find","a","s","idx","filter","BlogPostViewComponent","isAdmin","postId","getIdFromUrl","url","deletePost","BlogTopicEditorComponent","setTopic","initTopicForm","buildTopicForm","getTopic","topicForm","description","createTopic","updateTopic","routes","path","component","children","BlogViewComponent","portfolioProfileService","activeTopicId","getActiveProfileName","getPosts","getTopicsFromPosts","hasActiveTopic","filterPosts","getActiveTopicId","setActiveTopic","result","error","message","deleteTopic","removeTopic","BlogRoutingModule","forChild","BlogModule","forRoot"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus,\r\n    PortfolioProfileTechnology,\r\n    PortfolioProject\r\n} from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    activateProfile(profileId: number): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profileId}/activate`,\r\n            {},\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles`,\r\n            profile,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProfile(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/profiles/${id}`)\r\n    }\r\n\r\n    getProfiles(): Observable<PortfolioProfile[]> {\r\n        return this.http.get<PortfolioProfile[]>(`${environment.API_URL}/portfolio/profiles`);\r\n    }\r\n\r\n    getProfileStatuses(): Observable<PortfolioProfileStatus[]> {\r\n        return this.http.get<PortfolioProfileStatus[]>(`${environment.API_URL}/portfolio/profiles/statuses`);\r\n    }\r\n\r\n    getProfileTechnologies(id: number): Observable<PortfolioProfileTechnology[]> {\r\n        return this.http.get<PortfolioProfileTechnology[]>(`${environment.API_URL}/portfolio/profiles/${id}/technologies`);\r\n    }\r\n\r\n    updateProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profile.id}`,\r\n            profile,\r\n            { headers }\r\n        )\r\n    }\r\n\r\n    createProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProject(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProject(id: number): Observable<PortfolioProject> {\r\n        return this.http.get<PortfolioProject>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProjects(): Observable<PortfolioProject[]> {\r\n        return this.http.get<PortfolioProject[]>(`${environment.API_URL}/portfolio/projects`);\r\n    }\r\n\r\n    updateProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects/${project.id}`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProfileTechnology, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    profiles = (p1: PortfolioProfile, p2: PortfolioProfile) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    profileTechnologies = (pt1: PortfolioProfileTechnology, pt2: PortfolioProfileTechnology) => {\r\n        if(pt1.display_order > pt2.display_order) return 1;\r\n        if(pt1.display_order < pt2.display_order) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    projects = (p1: PortfolioProject, p2: PortfolioProject) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioEditorService extends EditorService {\r\n    private profile: PortfolioProfile;\r\n    private project: PortfolioProject;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getProfile(): PortfolioProfile {\r\n        console.log(this.profile);\r\n        return this.profile;\r\n    }\r\n\r\n    hasProfile(): boolean {\r\n        return this.profile !== undefined;\r\n    }\r\n\r\n    setProfile(profile: PortfolioProfile): void {\r\n        this.profile = profile;\r\n        console.log(this.profile);\r\n    }\r\n\r\n    getProject(): PortfolioProject {\r\n        return this.project;\r\n    }\r\n\r\n    hasProject(): boolean {\r\n        return this.project !== undefined;\r\n    }\r\n\r\n    setProject(project: PortfolioProject): void {\r\n        this.project = project;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { PortfolioProfile } from '@ui/modules/portfolio/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioProfileService {\r\n    private activeProfile: PortfolioProfile;\r\n\r\n    constructor() { }\r\n\r\n    public getActiveProfile(): PortfolioProfile {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    public getActiveProfileName(): string {\r\n        return this.activeProfile ? this.activeProfile.name : 'Software Engineering';\r\n    }\r\n\r\n    public setActiveProfile(profile: PortfolioProfile): void {\r\n        this.activeProfile = profile;\r\n    }\r\n}\r\n","<div class='section posts' *ngIf='posts'>\r\n    <h2 class='posts__header'>Posts</h2>\r\n\r\n    <div class='line-divider'></div>\r\n\r\n    <div class='container posts__post-container'>\r\n            <div class='posts__post' *ngFor='let post of getPosts() trackBy: this.trackingService.objectById; let idx = index' [ngClass]=\"{'posts__post--rjust': idx % 2 !== 0}\">\r\n                <a class=posts__post-anchor-wrapper [routerLink]=\"[this.getPostUrl(post.id, post.title)]\">\r\n                    <h3 class='posts__post-title' *ngIf='post.status.status === \"PUBLISHED\"'>{{ post.title }}</h3>\r\n                    <h3 class='posts__post-title' *ngIf='post.status.status !== \"PUBLISHED\"'>{{ post.status.status + \": \" + post.title }}</h3>\r\n\r\n                    <h4 class='posts__post-subtitle'>{{ post.subtitle }}</h4>\r\n                </a>\r\n\r\n\r\n                <div class='posts__post-topic-list' *ngIf='showTopics'>\r\n                    <a\r\n                            class='posts__post-topic-item'\r\n                            *ngFor='let topic of post.topics'\r\n                            (click)='blogTopicService.setActiveTopic(topic)'\r\n                            [routerLink]=\"['/blog']\"\r\n                    >\r\n                        {{ topic.name }}\r\n                    </a>\r\n                </div>\r\n\r\n                <p class='posts__post-preview' *ngIf='showPreview'>\r\n                    {{ post.preview.split(' ').slice(0, 44).join(' ') }} ...\r\n                </p>\r\n\r\n                <p class='posts__post-date' [innerHTML]='seoService.getFormattedDate(post.updated_at)'></p>\r\n            </div>\r\n    </div>\r\n\r\n    <button\r\n        aria-label='Display more posts'\r\n        [ngClass]=\"{'btn--hide': nPostsToDisplay >= posts.length}\"\r\n        class='btn posts__load-btn'\r\n        (click)='displayMorePosts()'\r\n    >\r\n        Load More\r\n    </button>\r\n\r\n    <a\r\n        *ngIf='showReadmore'\r\n        class='btn posts__readmore-btn'\r\n        routerLink='/blog'\r\n    >\r\n        See Blog\r\n    </a>\r\n</div>","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { SeoService, TrackingService } from '@ui/core/services';\r\n\r\nimport { BlogPost } from '../../models';\r\nimport { BlogComparisonService, BlogTopicService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-post-collection',\r\n    templateUrl: './blog-post-collection.component.html',\r\n    styleUrls: ['./blog-post-collection.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BlogPostCollectionComponent implements OnInit {\r\n    @Input() posts: BlogPost[];\r\n    \r\n    @Input() showPreview: boolean;\r\n    @Input() showTopics: boolean;\r\n    @Input() showReadmore: boolean;\r\n\r\n    // CAUTION: This is necessary because the routing changes when this component is used outside of the blog module\r\n    @Input() baseRoute: string = 'blog/posts';\r\n\r\n    nPostsToDisplay: number = 5;\r\n\r\n    constructor(\r\n        private blogComparisonService: BlogComparisonService,\r\n        public blogTopicService: BlogTopicService,\r\n        public seoService: SeoService,\r\n        public trackingService: TrackingService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.posts.forEach(p => {\r\n            p.topics.sort(this.blogComparisonService.topics);\r\n        });\r\n    }\r\n\r\n    getPosts(): BlogPost[] {\r\n        return this.posts.slice(0, this.nPostsToDisplay);\r\n    }\r\n\r\n    displayMorePosts(): void {\r\n       this.nPostsToDisplay += 5;\r\n\r\n        if(this.nPostsToDisplay >= this.posts.length) {\r\n            this.nPostsToDisplay = this.posts.length;\r\n        }\r\n    }\r\n\r\n    getPostUrl(id: number, name: string): string {\r\n        return `${this.baseRoute}/${this.seoService.getCanonicalUrl(id, name)}`;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.scss']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}","<div class=\"app-loading\">\r\n    <div class=\"logo\"></div>\r\n    <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n        <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n</div>","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport { BlogAuthor, BlogPost, BlogPostStatus, BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    getBlogAuthors(): Observable<BlogAuthor[]> {\r\n        return this.http.get<BlogAuthor[]>(`${environment.API_URL}/blog/authors`);\r\n    }\r\n\r\n    createPost(post: BlogPost): Observable<BlogPost> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<BlogPost>(\r\n            `${environment.API_URL}/blog/posts`,\r\n            post,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deletePost(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/blog/posts/${id}`);\r\n    }\r\n\r\n    getPost(id: number): Observable<BlogPost> {\r\n        return this.http.get<BlogPost>(`${environment.API_URL}/blog/posts/${id}`);\r\n    }\r\n\r\n    getPosts(topicId: number = -1, publishedOnly: boolean = true): Observable<BlogPost[]> {\r\n        let params = new HttpParams();\r\n\r\n        if(topicId != -1) params = params.set('topic_id', topicId.toString());\r\n        if(publishedOnly) params = params.set('published', 'true');\r\n\r\n        return this.http.get<BlogPost[]>(\r\n            `${environment.API_URL}/blog/posts`,\r\n            { params: params }\r\n        );\r\n    }\r\n\r\n    getPostStatuses(): Observable<BlogPostStatus[]> {\r\n        return this.http.get<BlogPostStatus[]>(`${environment.API_URL}/blog/posts/statuses`);\r\n    }\r\n\r\n    updatePost(post: BlogPost): Observable<BlogPost> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<BlogPost>(\r\n            `${environment.API_URL}/blog/posts/${post.id}`,\r\n            post,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createTopic(topic: BlogTopic): Observable<BlogTopic> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<BlogTopic>(\r\n            `${environment.API_URL}/blog/topics`,\r\n            topic,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteTopic(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/blog/topics/${id}`);\r\n    }\r\n\r\n    getTopics(): Observable<BlogTopic[]> {\r\n        return this.http.get<BlogTopic[]>(`${environment.API_URL}/blog/topics`);\r\n    }\r\n\r\n    updateTopic(topic: BlogTopic): Observable<BlogTopic> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<BlogTopic>(\r\n            `${environment.API_URL}/blog/topics/${topic.id}`,\r\n            topic,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { BlogPost, BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    posts = (p1: BlogPost, p2: BlogPost) => {\r\n        if(p1.updated_at < p2.updated_at) return 1;\r\n        if(p1.updated_at > p2.updated_at) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    topics = (t1: BlogTopic, t2: BlogTopic) => {\r\n        if(t1.name > t2.name) return 1;\r\n        if(t1.name < t2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { BlogPost, BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BlogEditorService extends EditorService {\r\n    private post: BlogPost;\r\n    private topic: BlogTopic;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getPost(): BlogPost {\r\n        return this.post;\r\n    }\r\n\r\n    hasPost(): boolean {\r\n        return this.post !== undefined;\r\n    }\r\n\r\n    setPost(post: BlogPost): void {\r\n        this.post = post;\r\n    }\r\n\r\n    getTopic(): BlogTopic {\r\n        return this.topic;\r\n    }\r\n\r\n    hasTopic(): boolean {\r\n        return this.topic !== undefined;\r\n    }\r\n\r\n    setTopic(topic: BlogTopic): void {\r\n        this.topic = topic;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BlogTopic } from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class BlogTopicService {\r\n    private activeTopic: BlogTopic;\r\n\r\n    constructor() { }\r\n\r\n    getActiveTopicId(): number {\r\n        if(!this.activeTopic) return -1;\r\n        return this.activeTopic.id;\r\n    }\r\n\r\n    hasActiveTopic(): boolean {\r\n        return (this.activeTopic !== undefined);\r\n    }\r\n\r\n    setActiveTopic(topic: BlogTopic): void {\r\n        this.activeTopic = topic;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-blog',\r\n    templateUrl: './blog.component.html'\r\n})\r\nexport class BlogComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}","<router-outlet></router-outlet>","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class BlogAuthor implements Deserializable {\r\n    constructor(partial: Partial<BlogAuthor>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    first_name: string;\r\n    last_name: string;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class BlogPostStatus implements Deserializable {\r\n    constructor(partial: Partial<BlogPostStatus>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    status: string;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class BlogTopic implements Deserializable {\r\n    constructor(partial: Partial<BlogTopic>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    name: string;\r\n    description: string;\r\n\r\n    created_at: Date;\r\n    updated_at: Date;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nimport { BlogAuthor } from './blog-author.model';\r\nimport { BlogPostStatus } from './blog-post-status.model';\r\nimport { BlogTopic } from './blog-topic.model';\r\n\r\nexport class BlogPost implements Deserializable {\r\n    constructor(partial: Partial<BlogPost>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        this.author = input.author.map(ba => new BlogAuthor({ ...ba }).deserialize(ba));\r\n        this.status = input.status.map(bps => new BlogPostStatus({ ...bps }).deserialize(bps));\r\n\r\n        this.topics = input.topics.map(bt => new BlogTopic({ ...bt }).deserialize(bt));\r\n\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    author: BlogAuthor;\r\n    status: BlogPostStatus;\r\n\r\n    topics?: BlogTopic[];\r\n\r\n    title: string;\r\n    subtitle: string;\r\n    preview: string;\r\n    content: string;\r\n    image_url: string;\r\n\r\n    created_at:      Date;\r\n    updated_at:      Date;\r\n}","<div class='section editor' *ngIf='isLoaded; else loading'>\r\n    <h1 class='editor__header'>Post Editor</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='editor__form' [formGroup]='postForm' (ngSubmit)='onSubmit()'>\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Title</label>\r\n            <br><br>\r\n            <input formControlName='title' required autofocus>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Subtitle</label>\r\n            <br><br>\r\n            <input formControlName='subtitle' required autofocus>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Author</label>\r\n            <br><br>\r\n            <mat-radio-group formControlName='author' name='author' required>\r\n                <mat-radio-button\r\n                    *ngFor='let author of authorData trackBy: this.trackingService.objectById'\r\n                    [value]='buildAuthorName(author)'\r\n                >{{ buildAuthorName(author) }}</mat-radio-button>\r\n            </mat-radio-group>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Status</label>\r\n            <br><br>\r\n            <mat-radio-group formControlName='status' name='status' required>\r\n                <mat-radio-button\r\n                        *ngFor='let status of statusData trackBy: this.trackingService.objectById'\r\n                        [value]='status.status'\r\n                >{{ status.status }}</mat-radio-button>\r\n            </mat-radio-group>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Topics</label>\r\n            <br><br>\r\n            <div class='form__checkbox-item' formArrayName='topics' *ngFor='let topic of postForm.controls.topics[\"controls\"] trackBy: this.trackingService.objectById; let idx = index'>\r\n                <mat-checkbox [formControlName]='idx'>{{ topicData[idx].name }}</mat-checkbox>\r\n                <br>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Preview</label>\r\n            <br><br>\r\n            <textarea formControlName='preview' required></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-field form-field--large editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Content</label>\r\n            <br><br>\r\n            <textarea formControlName='content' required></textarea>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Image URL</label>\r\n            <br><br>\r\n            <input formControlName='image_url' required>\r\n        </div>\r\n\r\n        <button\r\n            aria-label='Submit post'\r\n            [ngClass]=\"{'btn--inactive': !postForm.valid}\"\r\n            class='btn editor__form-btn editor__form-btn--submit'\r\n            [disabled]='!postForm.valid'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { Component, OnDestroy, OnInit, Input } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    ValidationService,\r\n    SeoService, TrackingService\r\n} from '@ui/core/services';\r\n\r\nimport { BlogPost, BlogTopic, BlogPostStatus, BlogAuthor } from '../../models';\r\nimport { BlogApiService, BlogEditorService, BlogComparisonService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-post-editor',\r\n    templateUrl: './blog-post-editor.component.html'\r\n})\r\nexport class BlogPostEditorComponent implements OnDestroy, OnInit {\r\n    postData: BlogPost;\r\n    authorData: BlogAuthor[] = [];\r\n    statusData: BlogPostStatus[] = [];\r\n    topicData: BlogTopic[] = [];\r\n\r\n    postForm: FormGroup;\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogEditorService: BlogEditorService,\r\n        private blogComparisonService: BlogComparisonService,\r\n        private notificationService: NotificationService,\r\n        private seoService: SeoService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService,\r\n        private validationService: ValidationService,\r\n        private formBuilder: FormBuilder,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnDestroy(): void {\r\n        this.blogEditorService.setPost(null);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle('Blog Post Editor | Matthew Maxwell');\r\n\r\n        this.checkForAdmin();\r\n\r\n        this.setPageHideEvent();\r\n\r\n        this.initPostForm();\r\n    }\r\n\r\n    private checkForAdmin(): void {\r\n        if(!this.authService.isLoggedIn())\r\n            this.router.navigate(['']);\r\n    }\r\n\r\n    private setPageHideEvent(): void {\r\n        window.onpagehide = () => {\r\n            this.blogEditorService.setPost(null);\r\n        };\r\n    }\r\n\r\n    private initPostForm(): void {\r\n        this.loadPostData();\r\n        this.loadAuthorData();\r\n        this.loadStatusData();\r\n        this.loadTopicData();\r\n\r\n        this.buildPostForm();\r\n    }\r\n\r\n    private loadPostData(): void {\r\n        this.postData = this.blogEditorService.getPost();\r\n    }\r\n\r\n    private loadAuthorData(): void {\r\n        this.blogApiService.getBlogAuthors().subscribe((res: BlogAuthor[]) => {\r\n            this.authorData = res;\r\n        });\r\n    }\r\n\r\n    private loadStatusData(): void {\r\n        this.blogApiService.getPostStatuses().subscribe((res: BlogPostStatus[]) => {\r\n            this.statusData = res;\r\n        })\r\n    }\r\n\r\n    private loadTopicData(): void {\r\n        this.blogApiService.getTopics().subscribe((res: BlogTopic[]) => {\r\n            this.topicData = res.sort(this.blogComparisonService.topics);\r\n\r\n            if(this.postData) {\r\n                this.setTopicControls(this.postData.topics.map(t => t.id));\r\n            } else {\r\n                this.setTopicControls([]);\r\n            }\r\n\r\n            this.isLoaded = true;\r\n        });\r\n    }\r\n\r\n    private setTopicControls(associatedTopicIds: number[]): void {\r\n        this.topicData.forEach(t => {\r\n            const control: FormControl = this.formBuilder.control(associatedTopicIds.includes(t.id));\r\n            (this.postForm.controls.topics as FormArray).push(control);\r\n        });\r\n    }\r\n\r\n    private buildPostForm(): void {\r\n        if(this.postData) {\r\n            this.postForm = this.formBuilder.group({\r\n                title:      this.formBuilder.control(this.postData.title,                        [Validators.required]),\r\n                subtitle:   this.formBuilder.control(this.postData.subtitle,                     [Validators.required]),\r\n                author:     this.formBuilder.control(this.buildAuthorName(this.postData.author), [Validators.required]),\r\n                status:     this.formBuilder.control(this.postData.status.status,                [Validators.required]),\r\n                topics:     this.formBuilder.array  (this.topicData,                             [this.validationService.hasMinElements(1)]),\r\n                preview:    this.formBuilder.control(this.postData.preview,                      [Validators.required]),\r\n                content:    this.formBuilder.control(this.postData.content,                      [Validators.required]),\r\n                image_url:  this.formBuilder.control(this.postData.image_url,                    [Validators.required])\r\n            });\r\n        } else {\r\n            this.postForm = this.formBuilder.group({\r\n                title:      this.formBuilder.control('',                [Validators.required]),\r\n                subtitle:   this.formBuilder.control('',                [Validators.required]),\r\n                author:     this.formBuilder.control('Matthew Maxwell', [Validators.required]),\r\n                status:     this.formBuilder.control('DRAFT',           [Validators.required]),\r\n                topics:     this.formBuilder.array  ([],                [this.validationService.hasMinElements(1)]),\r\n                preview:    this.formBuilder.control('',                [Validators.required]),\r\n                content:    this.formBuilder.control('',                [Validators.required]),\r\n                image_url:  this.formBuilder.control('',                [Validators.required])\r\n            });\r\n        }\r\n    }\r\n\r\n    buildAuthorName(author: BlogAuthor): string {\r\n        return `${author.first_name} ${author.last_name}`;\r\n    }\r\n\r\n    onSubmit(): void {\r\n        const post = this.buildFormPostData();\r\n\r\n        if(post.id === undefined) {\r\n            this.blogApiService.createPost(post).subscribe((res: BlogPost) => {\r\n                this.notificationService.createNotification('Successfully created new post!');\r\n                this.router.navigate([`blog/posts/${this.seoService.getCanonicalUrl(res.id, res.title)}`]);\r\n            });\r\n        } else {\r\n            this.blogApiService.updatePost(post).subscribe((res: BlogPost) => {\r\n                this.notificationService.createNotification('Successfully updated existing post!');\r\n                this.router.navigate([`blog/posts/${this.seoService.getCanonicalUrl(res.id, res.title)}`]);\r\n            });\r\n        }\r\n    }\r\n\r\n    private buildFormPostData(): BlogPost {\r\n        const author = this.buildFormAuthorData();\r\n        const status = this.buildFormStatusData();\r\n        const topics = this.buildFormTopicData();\r\n\r\n        return new BlogPost({\r\n            ...this.postForm.value,\r\n            id: this.postData ? this.postData.id : undefined,\r\n            author: author,\r\n            status: status,\r\n            topics: topics\r\n        });\r\n    }\r\n\r\n    private buildFormAuthorData(): BlogAuthor {\r\n        return this.authorData.find(a => this.buildAuthorName(a) === this.postForm.value.author);\r\n    }\r\n\r\n    private buildFormStatusData(): BlogPostStatus {\r\n        return this.statusData.find(s => s.status === this.postForm.value.status);\r\n    }\r\n\r\n    private buildFormTopicData(): BlogTopic[] {\r\n        return this.postForm.value.topics.map((t, idx) => {\r\n            if(t) return this.topicData[idx];\r\n        }).filter(t => t !== undefined);\r\n    }\r\n}\r\n","<div class='section post' *ngIf='isLoaded; else loading'>\r\n    <h1 class='post__title' *ngIf='post.status.status === \"PUBLISHED\"'>{{ post.title }}</h1>\r\n    <h1 class='post__title' *ngIf='post.status.status !== \"PUBLISHED\"'>{{ post.status.status + \": \" + post.title }}</h1>\r\n\r\n    <h2 class='post__subtitle'>{{ post.subtitle }}</h2>\r\n\r\n    <div class='post__btn-container' *ngIf='isAdmin'>\r\n        <a class='btn post__btn' (click)='sendPostToEditor()' routerLink='/blog/posts/editor'>\r\n            &#x270F;\r\n        </a>\r\n        <a class='btn post__btn btn--warn' (click)='deletePost(post.id)' routerLink='/blog'>\r\n            &#x2715;\r\n        </a>\r\n    </div>\r\n    \r\n    <p class='post__date' [innerHtml]='\"Updated: \" + seoService.getFormattedDate(post.updated_at)'></p>\r\n    \r\n    <div class='post__topic-container'>\r\n        <a class='post__topic-item' (click)='blogTopicService.setActiveTopic(topic)' [routerLink]=\"['/blog']\" *ngFor='let topic of post.topics trackBy: this.trackingService.objectById'>\r\n            {{ topic.name }}\r\n        </a>\r\n    </div>\r\n\r\n    <div class=\"line-divider\"></div>\r\n    \r\n    <div class='post__image-container'>\r\n        <picture>\r\n            <source [srcset]=\"post.image_url\" type=\"image/webp\">\r\n            <source [srcset]=\"post.image_url.substring(0, post.image_url.length - 4) + 'png'\" type=\"image/png\">\r\n            <img class='post__image' alt='Blog post image' [src]='post.image_url.substring(0, post.image_url.length - 4) + \"png\"'>\r\n        </picture>\r\n    </div>\r\n\r\n    <markdown [data]='post.content'></markdown>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { Component, OnInit } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router } from '@angular/router';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    SeoService,\r\n    TrackingService\r\n} from '@ui/core/services';\r\n\r\nimport { BlogPost } from '../../models';\r\nimport { BlogApiService, BlogEditorService, BlogComparisonService, BlogTopicService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-post-view',\r\n    templateUrl: './blog-post-view.component.html',\r\n    styleUrls: ['./blog-post-view.component.scss']\r\n})\r\nexport class BlogPostViewComponent implements OnInit {\r\n    isAdmin: boolean = false;\r\n    isLoaded: boolean = false;\r\n\r\n    post: BlogPost;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogEditorService: BlogEditorService,\r\n        private blogComparisonService: BlogComparisonService,\r\n        public blogTopicService: BlogTopicService,\r\n        private notificationService: NotificationService,\r\n        public seoService: SeoService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService,\r\n        private router: Router\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.isAdmin = this.authService.isLoggedIn();\r\n\r\n        const postId = this.seoService.getIdFromUrl(this.router.url);\r\n        if(!postId) {\r\n            this.notificationService.createNotification('Unable to find post ID.');\r\n            this.router.navigate(['']);\r\n            return;\r\n        }\r\n\r\n        this.blogApiService.getPost(postId).subscribe((res: BlogPost) => {\r\n            if(res.status.status !== 'PUBLISHED' && !this.isAdmin) {\r\n                this.notificationService.createNotification('Unable to view the blog post.');\r\n                this.router.navigate(['']);\r\n            }\r\n\r\n            this.titleService.setTitle(`${res.title} | Blog | Matthew Maxwell`);\r\n\r\n            this.post = res;\r\n            this.post.topics.sort(this.blogComparisonService.topics);\r\n\r\n            this.isLoaded = true;\r\n        });\r\n    }\r\n\r\n    sendPostToEditor(): void {\r\n        this.blogEditorService.setPost(this.post);\r\n    }\r\n\r\n    deletePost(id: number): void {\r\n        this.blogApiService.deletePost(id).subscribe((res: any) => {\r\n            this.notificationService.createNotification('Successfully deleted blog post!');\r\n            this.router.navigate(['/blog']);\r\n        });\r\n    }\r\n}\r\n","<div class='section editor topic-editor' *ngIf='isLoaded; else loading'>\r\n    <h1 class='editor__header'>Topic Editor</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='editor__form' [formGroup]='topicForm' (ngSubmit)='onSubmit()'>\r\n        <div class='form-field editor__form-field'>\r\n            <label class='form-field-label editor__form-field-label'>Name</label>\r\n            <br><br>\r\n            <input formControlName='name' required autofocus>\r\n        </div>\r\n\r\n        <div class=\"form-field editor__form-field\">\r\n            <label class='form-field-label editor__form-field-label'>Description</label>\r\n            <br><br>\r\n            <input formControlName='description' required>\r\n        </div>\r\n\r\n        <button\r\n            aria-label='Submit topic'\r\n            [ngClass]=\"{'btn--inactive': !topicForm.valid}\"\r\n            class='btn editor__form-btn  editor__form-btn--submit'\r\n            [disabled]='!topicForm.valid'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport { NotificationService } from '@ui/core/services';\r\n\r\nimport { BlogTopic } from '../../models';\r\nimport { BlogApiService, BlogEditorService } from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-topic-editor',\r\n    templateUrl: './blog-topic-editor.component.html'\r\n})\r\nexport class BlogTopicEditorComponent implements OnInit, OnDestroy {\r\n    topicData: BlogTopic;\r\n    topicForm: FormGroup;\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogEditorService: BlogEditorService,\r\n        private formBuilder: FormBuilder,\r\n        private notificationService: NotificationService,\r\n        private titleService: Title,\r\n        private router: Router,\r\n    ) { }\r\n\r\n    ngOnDestroy(): void {\r\n        this.blogEditorService.setTopic(null);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle('Blog Topic Editor | Matthew Maxwell');\r\n\r\n        this.checkForAdmin();\r\n\r\n        this.setPageHideEvent();\r\n\r\n        this.initTopicForm();\r\n    }\r\n\r\n    private checkForAdmin(): void {\r\n        if(!this.authService.isLoggedIn())\r\n            this.router.navigate(['']);\r\n    }\r\n\r\n    private setPageHideEvent(): void {\r\n        window.onpagehide = () => {\r\n            this.blogEditorService.setTopic(null);\r\n        };\r\n    }\r\n\r\n    private initTopicForm(): void {\r\n        this.loadTopicData();\r\n\r\n        this.buildTopicForm();\r\n    }\r\n\r\n    private loadTopicData(): void {\r\n        this.topicData = this.blogEditorService.getTopic();\r\n        this.isLoaded = true;\r\n    }\r\n\r\n    private buildTopicForm(): void {\r\n        if(this.topicData) {\r\n            this.topicForm = this.formBuilder.group({\r\n                name:        this.formBuilder.control(this.topicData.name,        [Validators.required]),\r\n                description: this.formBuilder.control(this.topicData.description, [Validators.required]),\r\n            });\r\n        } else {\r\n            this.topicForm = this.formBuilder.group({\r\n                name:        this.formBuilder.control('', [Validators.required]),\r\n                description: this.formBuilder.control('', [Validators.required]),\r\n            });\r\n        }\r\n    }\r\n\r\n    onSubmit(): void {\r\n        const topic = this.buildFormTopicData();\r\n\r\n        if(topic.id === undefined) {\r\n            this.blogApiService.createTopic(topic).subscribe((res: BlogTopic) => {\r\n                this.notificationService.createNotification('Successfully created new topic.');\r\n                this.router.navigate(['blog'])\r\n            });\r\n        } else {\r\n            this.blogApiService.updateTopic(topic).subscribe((res: BlogTopic) => {\r\n                this.notificationService.createNotification('Successfully updated existing topic.');\r\n                this.router.navigate(['blog'])\r\n            });\r\n        }\r\n    }\r\n\r\n    buildFormTopicData(): BlogTopic {\r\n        return new BlogTopic({\r\n            ...this.topicForm.value,\r\n            id: this.topicData ? this.topicData.id : undefined\r\n        });\r\n    }\r\n}\r\n","<div class='blog' *ngIf='isLoaded; else loading'>\r\n    <h1 class='blog__header'>Welcome to my blog!</h1>\r\n\r\n    <div class='section topics'>\r\n        <h2 class='blog__filter-header'>Topics</h2>\r\n\r\n        <div class='line-divider'></div>\r\n\r\n        <div class='blog__filter-btn-container'>\r\n            <div class='blog__filter-btn-row blog__filter-btn-row--all'>\r\n                <button\r\n                        aria-label='Select all topics'\r\n                        [ngClass]=\"{'btn--active': activeTopicId === -1, 'blog__filter-btn--half': isAdmin}\"\r\n                        class='btn blog__filter-btn blog__filter-btn--all'\r\n                        (click)='filterPosts(-1)'\r\n                        type='button'\r\n                >\r\n                    All\r\n                </button>\r\n\r\n                <ng-container *ngIf='isAdmin'>\r\n                    <button aria-label='Edit blog topic' class='btn blog__filter-btn--add btn--go' routerLink='/blog/topics/editor'>\r\n                        &#x2b;\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n\r\n            <div class='blog__filter-btn-row' *ngFor='let topic of topics trackBy: this.trackingService.objectById'>\r\n                <button\r\n                    aria-label='Filter blog topic'\r\n                    [ngClass]=\"{'btn--active': topic.id === activeTopicId, 'blog__filter-btn--half': isAdmin}\"\r\n                    class='btn blog__filter-btn'\r\n                    (click)='filterPosts(topic.id)'\r\n                    type='button'\r\n                >\r\n                    {{ topic.name }}\r\n                </button>\r\n    \r\n                <ng-container *ngIf='isAdmin'>\r\n                    <button\r\n                            aria-label='Edit blog topic'\r\n                            class='btn blog__filter-btn--edit'\r\n                            (click)='sendTopicToEditor(topic)'\r\n                            routerLink='/blog/topics/editor'\r\n                    >\r\n                        &#x270F;\r\n                    </button>\r\n                    <button\r\n                            aria-label='Delete blog topic'\r\n                            class='btn blog__filter-btn--edit btn--warn'\r\n                            (click)='deleteTopic(topic)'\r\n                            type='button'\r\n                    >\r\n                        &#x2715;\r\n                    </button>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    \r\n    <app-blog-post-collection [posts]='posts' [showPreview]='true' baseRoute='posts/'></app-blog-post-collection>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { BlogComponent } from './blog.component';\r\n\r\nimport {\r\n    BlogPostEditorComponent,\r\n    BlogPostViewComponent,\r\n    BlogTopicEditorComponent,\r\n    BlogViewComponent\r\n} from './components';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: BlogComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: BlogViewComponent\r\n            },\r\n            {\r\n                path: 'posts/editor',\r\n                component: BlogPostEditorComponent\r\n            },\r\n            {\r\n                path: 'posts/:id/:uri',\r\n                component: BlogPostViewComponent\r\n            },\r\n            {\r\n                path: 'topics/editor',\r\n                component: BlogTopicEditorComponent\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class BlogRoutingModule { }","import { Component, OnInit } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    TrackingService\r\n} from '@ui/core/services';\r\nimport { PortfolioProfileService } from '@ui/modules/portfolio/services';\r\n\r\nimport { BlogPost, BlogTopic } from '../../models';\r\nimport {\r\n    BlogApiService,\r\n    BlogComparisonService,\r\n    BlogEditorService,\r\n    BlogTopicService\r\n} from '../../services';\r\n\r\n@Component({\r\n    selector: 'app-blog-view',\r\n    templateUrl: './blog-view.component.html',\r\n    styleUrls: ['./blog-view.component.scss']\r\n})\r\nexport class BlogViewComponent implements OnInit {\r\n    isAdmin: boolean = false;\r\n    isLoaded: boolean = false;\r\n\r\n    posts: BlogPost[];\r\n    topics: BlogTopic[];\r\n\r\n    activeTopicId: number = -1;\r\n\r\n    constructor(\r\n        private authService: AuthService,\r\n        private blogApiService: BlogApiService,\r\n        private blogComparisonService: BlogComparisonService,\r\n        private blogEditorService: BlogEditorService,\r\n        public blogTopicService: BlogTopicService,\r\n        private notificationService: NotificationService,\r\n        private portfolioProfileService: PortfolioProfileService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle(`${this.portfolioProfileService.getActiveProfileName()} Blog | Matthew Maxwell`);\r\n\r\n        this.isAdmin = this.authService.isLoggedIn();\r\n\r\n        if(this.isAdmin) {\r\n            this.blogApiService.getPosts(this.activeTopicId, false).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.topics = this.getTopicsFromPosts().sort(this.blogComparisonService.topics);\r\n\r\n                if(this.blogTopicService.hasActiveTopic()) {\r\n                    this.filterPosts(this.blogTopicService.getActiveTopicId());\r\n                    this.blogTopicService.setActiveTopic(null);\r\n                    this.blogTopicService.getActiveTopicId();\r\n                }\r\n\r\n                this.isLoaded = true;\r\n            });\r\n        } else {\r\n            this.blogApiService.getPosts(this.activeTopicId).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.topics = this.getTopicsFromPosts().sort(this.blogComparisonService.topics);\r\n\r\n                if(this.blogTopicService.hasActiveTopic()) {\r\n                    this.filterPosts(this.blogTopicService.getActiveTopicId());\r\n                    this.blogTopicService.setActiveTopic(null);\r\n                }\r\n\r\n                this.isLoaded = true;\r\n            });\r\n        }\r\n    }\r\n\r\n    private getTopicsFromPosts(): BlogTopic[] {\r\n        let result: BlogTopic[] = [];\r\n\r\n        this.posts.forEach(p => {\r\n            p.topics.forEach(t => {\r\n                if(!result.map(bt => bt.id).includes(t.id)) result.push(t);\r\n            });\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    filterPosts(topicId: number): void {\r\n        if(this.isAdmin) {\r\n            this.blogApiService.getPosts(topicId, false).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.activeTopicId = topicId;\r\n            });\r\n        } else {\r\n            this.blogApiService.getPosts(topicId).subscribe((res: BlogPost[]) => {\r\n                this.posts = res;\r\n                this.activeTopicId = topicId;\r\n            }, (error: HttpErrorResponse) => {\r\n                this.notificationService.createNotification(error.error.message);\r\n            });\r\n        }\r\n    }\r\n\r\n    sendTopicToEditor(topic: BlogTopic): void {\r\n        this.blogEditorService.setTopic(topic);\r\n    }\r\n\r\n    deleteTopic(topic: BlogTopic): void {\r\n        this.blogApiService.deleteTopic(topic.id).subscribe((res: any) => {\r\n            this.removeTopic(topic.id);\r\n            this.notificationService.createNotification('Successfully deleted blog topic!');\r\n            this.filterPosts(-1);\r\n        }, (error: HttpErrorResponse) => {\r\n            this.notificationService.createNotification(error.error.message);\r\n        });\r\n    }\r\n\r\n    private removeTopic(id: number): void {\r\n        this.topics = this.topics.filter(t => t.id != id);\r\n\r\n        this.posts = this.posts.filter(p => !p.topics.map(t => t.id).includes(id));\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { MarkdownModule } from 'ngx-markdown';\r\n\r\nimport { CoreModule } from '@ui/core/core.module';\r\nimport { MaterialModule } from '@ui/modules/material/material.module';\r\n\r\nimport { BlogComponent } from './blog.component';\r\nimport { BlogRoutingModule } from './blog-routing.module';\r\n\r\nimport {\r\n    BlogPostCollectionComponent,\r\n    BlogPostEditorComponent,\r\n    BlogPostViewComponent,\r\n    BlogTopicEditorComponent,\r\n    BlogViewComponent\r\n} from './components';\r\nimport {\r\n    BlogApiService,\r\n    BlogComparisonService\r\n} from './services';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        BlogComponent,\r\n        BlogPostCollectionComponent,\r\n        BlogPostEditorComponent,\r\n        BlogPostViewComponent,\r\n        BlogTopicEditorComponent,\r\n        BlogViewComponent\r\n    ],\r\n    imports: [\r\n        BlogRoutingModule,\r\n        CommonModule,\r\n        CoreModule,\r\n        MarkdownModule.forRoot(),\r\n        MaterialModule,\r\n        ReactiveFormsModule\r\n    ],\r\n    exports: [\r\n        BlogPostCollectionComponent\r\n    ],\r\n    providers: [\r\n        BlogApiService,\r\n        BlogComparisonService\r\n    ]\r\n})\r\nexport class BlogModule { }"]}