{"version":3,"sources":["webpack:///src/app/modules/portfolio/services/portfolio-api.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-profile.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-editor.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-comparison.service.ts","webpack:///src/app/modules/admin/admin.component.ts","webpack:///src/app/modules/admin/admin.component.html","webpack:///src/app/modules/admin/components/dashboard/dashboard.component.html","webpack:///src/app/modules/admin/components/register/register.component.ts","webpack:///src/app/modules/admin/components/login/login.component.ts","webpack:///src/app/modules/admin/components/dashboard/dashboard.component.ts","webpack:///src/app/modules/admin/admin.module.ts","webpack:///src/app/modules/admin/admin-routing.module.ts","webpack:///src/app/modules/admin/components/login/login.component.html","webpack:///src/app/modules/admin/components/register/register.component.html","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.html","webpack:///src/app/modules/portfolio/models/portfolio-profile-status.model.ts","webpack:///src/app/modules/portfolio/models/portfolio-profile-technology.model.ts","webpack:///src/app/modules/portfolio/models/portfolio-project.model.ts","webpack:///src/app/modules/portfolio/models/portfolio-profile.model.ts"],"names":["PortfolioApiService","PortfolioProfileService","PortfolioEditorService","PortfolioComparisonService","http","profileId","headers","this","contentTypeHeader","put","environment","API_URL","profile","post","id","get","project","super","profiles","p1","p2","name","profileTechnologies","pt1","pt2","display_order","projects","console","log","activeProfile","AdminComponent","notificationService","RegisterComponent","LoginComponent","DashboardComponent","AdminModule","AdminRoutingModule","routes","path","component","children","router","authApiService","authService","portfolioApiService","portfolioComparisonService","portfolioEditorService","portfolioProfileService","titleService","trackingService","isLoaded","setTitle","isLoggedIn","populateProfiles","getProfiles","subscribe","res","sort","setActiveProfile","find","p","status","activateProfile","modifyProfileStatuses","createNotification","activeId","forEach","logoutAdmin","getAdmin","navigate","setProfile","length","deleteProfile","filter","location","reload","validationService","username","password","loginAdmin","onLoginSubmit","admin","registerAdmin","onRegisterSubmit","forChild","LoadingSpinnerComponent","PortfolioProfileStatus","partial","Object","assign","input","PortfolioProfileTechnology","map","deserialize","s","technologies","t"],"mappings":"ylDAiBaA,ECVAC,ECEAC,ECAAC,E,gDHQN,IAAMH,EAAN,8BACH,WAAYI,gCACFA,GAFP,kDAKaC,GACZ,IAAMC,EAAUC,KAAKC,oBAErB,OAAOD,KAAKH,KAAKK,IAAVF,UACAG,EAAA,EAAYC,QADZJ,+BAC0CF,EAD1CE,aAEH,GACA,CAAED,cAXP,oCAeWM,GACV,IAAMN,EAAUC,KAAKC,oBAErB,OAAOD,KAAKH,KAAKS,KACVH,EAAA,EAAYC,QAAf,sBACAC,EACA,CAAEN,cArBP,oCAyBWQ,GACV,OAAOP,KAAKH,KAALG,iBAAyBG,EAAA,EAAYC,QAArCJ,+BAAmEO,MA1B3E,oCA8BC,OAAOP,KAAKH,KAAKW,IAA2BL,EAAA,EAAYC,QAAf,yBA9B1C,2CAkCC,OAAOJ,KAAKH,KAAKW,IAAiCL,EAAA,EAAYC,QAAf,kCAlChD,6CAqCoBG,GACnB,OAAOP,KAAKH,KAAKW,IAAVR,UAA+CG,EAAA,EAAYC,QAA3DJ,+BAAyFO,EAAzFP,oBAtCR,oCAyCWK,GACV,IAAMN,EAAUC,KAAKC,oBAErB,OAAOD,KAAKH,KAAKK,IAAVF,UACAG,EAAA,EAAYC,QADZJ,+BAC0CK,EAAQE,IACrDF,EACA,CAAEN,cA/CP,oCAmDWU,GACV,IAAMV,EAAUC,KAAKC,oBAErB,OAAOD,KAAKH,KAAKS,KACVH,EAAA,EAAYC,QAAf,sBACAK,EACA,CAAEV,cAzDP,oCA6DWQ,GACV,OAAOP,KAAKH,KAALG,iBAAyBG,EAAA,EAAYC,QAArCJ,+BAAmEO,MA9D3E,iCAiEQA,GACP,OAAOP,KAAKH,KAAKW,IAAVR,UAAmCG,EAAA,EAAYC,QAA/CJ,+BAA6EO,MAlErF,oCAsEC,OAAOP,KAAKH,KAAKW,IAA2BL,EAAA,EAAYC,QAAf,yBAtE1C,oCAyEWK,GACV,IAAMV,EAAUC,KAAKC,oBAErB,OAAOD,KAAKH,KAAKK,IAAVF,UACAG,EAAA,EAAYC,QADZJ,+BAC0CS,EAAQF,IACrDE,EACA,CAAEV,gBA/EP,GAAkC,M,oCAA5BN,GAAmB,Y,yBAAnBA,EAAmB,QAAnBA,EAAmB,qBAFhB,S,eGNT,IAAMG,EAAN,8BACH,aAAa,wBACTc,gBAGJC,SAAW,SAACC,EAAsBC,GAAvB,OACJD,EAAGE,KAAOD,EAAGC,KAAa,EAC1BF,EAAGE,KAAOD,EAAGC,MAAc,EAEvB,GAGX,EAAAC,oBAAsB,SAACC,EAAiCC,GAAlC,OACfD,EAAIE,cAAgBD,EAAIC,cAAsB,EAC9CF,EAAIE,cAAgBD,EAAIC,eAAuB,EAE3C,GAGX,EAAAC,SAAW,SAACP,EAAsBC,GAAvB,OACJD,EAAGE,KAAOD,EAAGC,KAAa,EAC1BF,EAAGE,KAAOD,EAAGC,MAAc,EAEvB,GAtBE,EADV,UAAyC,M,oCAAnClB,I,yBAAAA,EAA0B,QAA1BA,EAA0B,qBAFzB,S,GDEP,IAAMD,EAAN,8BAIH,aAAa,8BAJV,+CAUC,OADAyB,QAAQC,IAAIrB,KAAKK,SACVL,KAAKK,UAVb,mCAcC,YAAO,IAAAL,KAAKK,UAdb,iCAiBQA,GACPL,KAAKK,QAAUA,EACfe,QAAQC,IAAIrB,KAAKK,WAnBlB,mCAuBC,OAAOL,KAAKS,UAvBb,mCA2BC,YAAO,IAAAT,KAAKS,UA3Bb,iCA8BQA,GACPT,KAAKS,QAAUA,MA/BhB,GAAqC,M,oCAA/Bd,I,yBAAAA,EAAsB,QAAtBA,EAAsB,qBAFrB,S,GDAP,IAAMD,EAAN,WAGH,aAAa,UAHV,qDAMC,OAAOM,KAAKsB,gBANb,6CAUC,OAAOtB,KAAKsB,cAAgBtB,KAAKsB,cAAcR,KAAO,yBAVvD,uCAaqBT,GACpBL,KAAKsB,cAAgBjB,MAdtB,M,oCAAMX,I,yBAAAA,EAAuB,QAAvBA,EAAuB,qBAFpB,S,+FGCH6B,E,4DAAN,IAAMA,EAAN,WAEH,aAAa,UAFV,wD,oCAAMA,I,uBAAAA,EAAc,qECN3B,yB,wLCKI,gBACI,cAA8D,gBAAK,OACnE,cAA8B,gDAASC,oBAAA,mBAAuC,2CAAyC,mBAAQ,OACnI,O,MAFkC,sC,sBAIlC,gBACI,aAAI,eAAI,OACR,aACA,cACI,wBACJ,OACA,eACI,yBACJ,OACA,aACJ,Q,sBAEA,gBACI,aAAI,oBAAS,OACb,aACA,eACI,2BACJ,OACA,eACI,2BACJ,OACA,aACJ,Q,2HAKI,iBACI,oBAIQ,sFAGJ,QACJ,OAEA,eAEQ,4FAIJ,mBACJ,OACA,eAEQ,sFAEJ,mBACJ,OACJ,O,0BAtBY,4DAKJ,6BAOI,4C,yBAlBhB,gBACI,aAAI,mBAAQ,OACZ,aACA,uBA2BA,aAAI,aACR,Q,mBA5B4C,mCAAyE,8C,qCA8BrH,gBACI,iBACA,eAAwC,mEAA0B,iBAAM,OAC5E,Q,yBAtEJ,gBACI,eAA8B,oBAAS,OAEvC,gBAEA,sBAKA,sBAYA,sBAYA,sBAiCA,sBAIJ,Q,kBAlE0C,iDAKA,gDAYA,gDAYA,gDAiCA,iD,qBAOtC,8B,IC5DSC,ECAAC,ECUAC,ECKAC,ECWAC,E,kFA7BAC,EAAiB,CAC1B,CACIC,KAAM,GACNC,UAAW,EACXC,SAAU,CACN,CACIF,KAAM,GACNC,WFMHL,EAAN,WAKH,WACYO,EACAC,EACDC,EACAZ,EACCa,EACAC,EACAC,EACAC,EACAC,EACDC,aATC,KAAAR,SACA,KAAAC,iBACD,KAAAC,cACA,KAAAZ,sBACC,KAAAa,sBACA,KAAAC,6BACA,KAAAC,yBACA,KAAAC,0BACA,KAAAC,eACD,KAAAC,kBAZX,KAAAC,YAHG,6CAmBC3C,KAAKyC,aAAaG,SAAS,qCAExB5C,KAAKoC,YAAYS,aAChB7C,KAAK8C,mBAEL9C,KAAK2C,cAxBV,yCA4Be,WACd3C,KAAKqC,oBAAoBU,cAAcC,WAAWC,YAC9CjD,EAAKW,SAAWsC,EAAIC,KAAKlD,EAAKsC,2BAA2B3B,UACzDX,EAAKmD,mBAELnD,EAAK2C,iBAjCV,yCAsCC,IAAMrB,EAAgBtB,KAAKW,SAASyC,MAAKC,YAACA,MAAwB,WAApBA,EAAEC,OAAOA,UACvDtD,KAAKwC,wBAAwBW,iBAAiB7B,KAvC/C,oCA0CWjB,cACmB,WAA1BA,EAAQiD,OAAOA,QAElBtD,KAAKqC,oBAAoBkB,gBAAgBlD,EAAQE,IAAIyC,WAAWC,YAC5DjD,EAAKwC,wBAAwBW,iBAAiBF,GAE9CjD,EAAKwD,sBAAsBP,EAAI1C,IAC/BP,EAAKwB,oBAAoBiC,mBAAzBzD,sCAA2EiD,EAAInC,KAA/Ed,oBAjDL,4CAqD2B0D,GAC1B1D,KAAKW,SAASgD,SAAQN,YAEdA,EAAEC,OAAS,IAAI,IADhBD,EAAE9C,KAAOmD,EAC8B,CAAEJ,OAAQ,UAEV,CAAEA,OAAQ,kBA1DzD,sCA+DY,WACXtD,KAAKmC,eAAeyB,cAAcZ,WAAUC,YACxCjD,EAAKwB,oBAAoBiC,mBAAzBzD,eAAoDA,EAAKoC,YAAYyB,WAArE7D,MACAA,EAAKoC,YAAYwB,cACjB5D,EAAKkC,OAAO4B,SAAS,CAAC,eAnE3B,0CAuEiBzD,GAChBL,KAAKuC,uBAAuBwB,WAAW1D,KAxExC,oCA2EWA,cACkB,IAAzBL,KAAKW,SAASqD,OAKjBhE,KAAKqC,oBAAoB4B,cAAc5D,EAAQE,IAAIyC,WAAWC,YAC1DjD,EAAKW,SAAWX,EAAKW,SAASuD,QAAOb,YAACA,OAAIA,EAAE9C,KAAOF,EAAQE,MAC3DP,EAAKwB,oBAAoBiC,mBAAmB,gCACf,WAA1BpD,EAAQiD,OAAOA,QAAqBa,SAASC,YAPhDpE,KAAKwB,oBAAoBiC,mBAAmB,4CA7EjD,K,sCAAM9B,GAAkB,sG,uBAAlBA,EAAkB,6jC,GAAA,MHxB/B,sBAyEA,yC,mBAzE+B,wBAA8B,gB,0rBKoBjD,CACII,KAAM,QACNC,WHRHN,EAAN,WAIH,WACYQ,EACAC,EACAC,EACAZ,EACD6C,aAJC,KAAAnC,SACA,KAAAC,iBACA,KAAAC,cACA,KAAAZ,sBACD,KAAA6C,oBARX,KAAAC,SAAmB,GACnB,KAAAC,SAAmB,GAFhB,6CAaIvE,KAAKoC,YAAYS,eAClB7C,KAAKwB,oBAAoBiC,mBAAmB,sBAC5CzD,KAAKkC,OAAO4B,SAAS,CAAC,aAfzB,sCAmBY,WAMX9D,KAAKmC,eAAeqC,WALC,CACjBF,SAAUtE,KAAKsE,SACfC,SAAUvE,KAAKuE,WAGmBvB,WAAUC,YAC9CjD,EAAKoC,YAAYoC,WAAWvB,EAAI1C,GAAI0C,EAAIqB,UACxCtE,EAAKwB,oBAAoBiC,mBAAzBzD,wBAA6DiD,EAAIqB,SAAjEtE,MACAA,EAAKkC,OAAO4B,SAAS,CAAC,iBA5BzB,K,sCAAMpC,GAAc,oD,uBAAdA,EAAc,yfId3B,gBACI,eAA0B,gBAAK,OAE/B,gBAEA,iBAA0B,mCAAY,EAAA+C,mBAClC,gBACI,gBAAO,mBAAQ,OACf,aAAI,aACJ,mBAAO,yDAAP,OACJ,OACA,cAEA,iBACI,iBAAO,oBAAQ,OACf,cAAI,cACJ,mBAAO,yDAAP,OACJ,OACA,cAEA,oBAMI,oBACJ,OACJ,OACJ,Q,MApBmB,oCAOA,mCAMP,uGAA8F,mF,0RDE9F,CACI1C,KAAM,WACNC,WJZHP,EAAN,WAIH,WACYS,EACAC,EACAC,EACAZ,EACD6C,aAJC,KAAAnC,SACA,KAAAC,iBACA,KAAAC,cACA,KAAAZ,sBACD,KAAA6C,oBARX,KAAAC,SAAmB,GACnB,KAAAC,SAAmB,GAFhB,6CAaCvE,KAAKwB,oBAAoBiC,mBAAmB,wCAC5CzD,KAAKkC,OAAO4B,SAAS,CAAC,UAEnB9D,KAAKoC,YAAYS,eAChB7C,KAAKwB,oBAAoBiC,mBAAmB,sBAC5CzD,KAAKkC,OAAO4B,SAAS,CAAC,aAlB3B,yCAsBe,WACRY,EAAe,CACjBJ,SAAUtE,KAAKsE,SACfC,SAAUvE,KAAKuE,UAGnBvE,KAAKmC,eAAewC,cAAcD,GAAO1B,WAAUC,YAC/CjD,EAAKwB,oBAAoBiC,mBAAzBzD,iBAAsD0E,EAAMJ,SAA5DtE,qBACAA,EAAKkC,OAAO4B,SAAS,CAAC,uBA9B3B,K,sCAAMrC,GAAiB,oD,uBAAjBA,EAAiB,ihBMd9B,gBACI,eAA6B,mBAAQ,OAErC,gBAEA,iBAA6B,mCAAY,EAAAmD,sBACrC,gBACI,gBAAO,mBAAQ,OACf,aAAI,aACJ,mBAAO,yDAAP,OACJ,OACA,cAEA,iBACI,iBAAO,oBAAQ,OACf,cAAI,cACJ,mBAAO,yDAAP,OACJ,OACA,cAEA,oBAMI,oBACJ,OACJ,OACJ,Q,MApBmB,oCAOA,mCAMP,uGAA8F,mF,iSFkBnG,IAAM/C,EAAN,yB,qBAAMA,I,oDAAAA,IAAkB,SAPlB,CACL,IAAagD,SAAS/C,IAGtB,O,GDRD,IAAMF,EAAN,yB,qBAAMA,I,oDAAAA,IAAW,SAPX,CACL,EACA,IACA,IACA,Q,0FInBD,iBAAMkD,EAAN,WAEL,aAAa,UAFR,uD,6CAAMA,I,uBAAAA,EAAuB,8PCPpC,gBACI,gBACA,uBACI,mBACJ,OACJ,S,ioCDEO,I,8KELMC,E,WACT,WAAYC,aACRC,OAAOC,OAAOlF,KAAMgF,G,8CAGZG,GAER,OADAF,OAAOC,OAAOlF,KAAMmF,GACbnF,S,KCPFoF,E,WACT,WAAYJ,aACRC,OAAOC,OAAOlF,KAAMgF,G,8CAGZG,GAER,OADAF,OAAOC,OAAOlF,KAAMmF,GACbnF,S,KCLF,E,WACT,WAAYgF,aACRC,OAAOC,OAAOlF,KAAMgF,G,8CAGZG,GAKR,OAJAF,OAAOC,OAAOlF,KAAMmF,GAEpBnF,KAAKW,SAAWwE,EAAMxE,SAAS0E,KAAIhC,YAACA,OAAI,IAAI,EAAiB,OAAD,UAAMA,IAAKiC,YAAYjC,MAE5ErD,S,KCRF,E,WACT,WAAYgF,aACRC,OAAOC,OAAOlF,KAAMgF,G,8CAGZG,GAOR,OANAF,OAAOC,OAAOlF,KAAMmF,GAEpBnF,KAAKsD,OAAS6B,EAAM7B,OAAO+B,KAAIE,YAACA,OAAI,IAAIR,EAAuB,OAAD,UAAMQ,IAAKD,YAAYC,MACrFvF,KAAKwF,aAAeL,EAAMK,aAAaH,KAAII,YAACA,OAAI,IAAIL,EAA2B,OAAD,UAAMK,IAAKH,YAAYG,MACrGzF,KAAKmB,SAAWgE,EAAMhE,SAASkE,KAAIhC,YAACA,OAAI,IAAI,EAAiB,OAAD,UAAMA,IAAKiC,YAAYjC,MAE5ErD,S","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus,\r\n    PortfolioProfileTechnology,\r\n    PortfolioProject\r\n} from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    activateProfile(profileId: number): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profileId}/activate`,\r\n            {},\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles`,\r\n            profile,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProfile(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/profiles/${id}`)\r\n    }\r\n\r\n    getProfiles(): Observable<PortfolioProfile[]> {\r\n        return this.http.get<PortfolioProfile[]>(`${environment.API_URL}/portfolio/profiles`);\r\n    }\r\n\r\n    getProfileStatuses(): Observable<PortfolioProfileStatus[]> {\r\n        return this.http.get<PortfolioProfileStatus[]>(`${environment.API_URL}/portfolio/profiles/statuses`);\r\n    }\r\n\r\n    getProfileTechnologies(id: number): Observable<PortfolioProfileTechnology[]> {\r\n        return this.http.get<PortfolioProfileTechnology[]>(`${environment.API_URL}/portfolio/profiles/${id}/technologies`);\r\n    }\r\n\r\n    updateProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profile.id}`,\r\n            profile,\r\n            { headers }\r\n        )\r\n    }\r\n\r\n    createProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProject(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProject(id: number): Observable<PortfolioProject> {\r\n        return this.http.get<PortfolioProject>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProjects(): Observable<PortfolioProject[]> {\r\n        return this.http.get<PortfolioProject[]>(`${environment.API_URL}/portfolio/projects`);\r\n    }\r\n\r\n    updateProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects/${project.id}`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PortfolioProfile } from '@ui/modules/portfolio/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioProfileService {\r\n    private activeProfile: PortfolioProfile;\r\n\r\n    constructor() { }\r\n\r\n    public getActiveProfile(): PortfolioProfile {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    public getActiveProfileName(): string {\r\n        return this.activeProfile ? this.activeProfile.name : 'Software Engineering';\r\n    }\r\n\r\n    public setActiveProfile(profile: PortfolioProfile): void {\r\n        this.activeProfile = profile;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioEditorService extends EditorService {\r\n    private profile: PortfolioProfile;\r\n    private project: PortfolioProject;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getProfile(): PortfolioProfile {\r\n        console.log(this.profile);\r\n        return this.profile;\r\n    }\r\n\r\n    hasProfile(): boolean {\r\n        return this.profile !== undefined;\r\n    }\r\n\r\n    setProfile(profile: PortfolioProfile): void {\r\n        this.profile = profile;\r\n        console.log(this.profile);\r\n    }\r\n\r\n    getProject(): PortfolioProject {\r\n        return this.project;\r\n    }\r\n\r\n    hasProject(): boolean {\r\n        return this.project !== undefined;\r\n    }\r\n\r\n    setProject(project: PortfolioProject): void {\r\n        this.project = project;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProfileTechnology, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    profiles = (p1: PortfolioProfile, p2: PortfolioProfile) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    profileTechnologies = (pt1: PortfolioProfileTechnology, pt2: PortfolioProfileTechnology) => {\r\n        if(pt1.display_order > pt2.display_order) return 1;\r\n        if(pt1.display_order < pt2.display_order) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    projects = (p1: PortfolioProject, p2: PortfolioProject) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-admin',\r\n    templateUrl: './admin.component.html'\r\n})\r\nexport class AdminComponent implements OnInit {\r\n\r\n    constructor() { }\r\n\r\n    ngOnInit(): void { }\r\n}\r\n","<router-outlet></router-outlet>","<div class='section dashboard' *ngIf='isLoaded; else loading'>\r\n    <h1 class='dashboard__header'>Dashboard</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='!authService.isLoggedIn()'>\r\n        <a class='btn dashboard__btn' [routerLink]=\"['/admin/login']\">Login</a>\r\n        <a class='btn dashboard__btn' (click)='notificationService.createNotification(\"This functionality is not available.\")'>Register</a>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <h2>Blog</h2>\r\n        <br>\r\n        <a class='btn dashboard__btn' routerLink='/blog/posts/editor'>\r\n            Create Post\r\n        </a>\r\n        <a class='btn dashboard__btn' routerLink='/blog/topics/editor'>\r\n            Create Topic\r\n        </a>\r\n        <br>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <h2>Portfolio</h2>\r\n        <br>\r\n        <a class='btn dashboard__btn' routerLink='/portfolio/profiles/editor'>\r\n            Create Profile\r\n        </a>\r\n        <a class='btn dashboard__btn' routerLink='/portfolio/projects/editor'>\r\n            Create Project\r\n        </a>\r\n        <br>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <h2>Profiles</h2>\r\n        <br>\r\n        <div class='dashboard__profile-btn-row' *ngFor='let profile of profiles trackBy: this.trackingService.objectById'>\r\n            <button\r\n                    aria-label='Activate profile'\r\n                    [ngClass]=\"{'btn--active': profile.status.status == 'ACTIVE' }\"\r\n                    class='btn dashboard__profile-btn'\r\n                    (click)='changeProfile(profile)'\r\n                    type='button'\r\n            >\r\n                {{ profile.name }}\r\n            </button>\r\n\r\n            <a\r\n                    class='btn dashboard__profile-btn--edit'\r\n                    (click)='sendProfileToEditor(profile)'\r\n                    routerLink='/portfolio/profiles/editor'\r\n                    [queryParams]='{type: \"profile\", id: profile.id}'\r\n            >\r\n                &#x270F;\r\n            </a>\r\n            <a\r\n                    class='btn dashboard__profile-btn--edit btn--warn'\r\n                    (click)='deleteProfile(profile)'\r\n            >\r\n                &#x2715;\r\n            </a>\r\n        </div>\r\n\r\n        <br><br>\r\n    </div>\r\n\r\n    <div class='dashboard__btn-container' *ngIf='authService.isLoggedIn()'>\r\n        <div class='section-divider--half'></div>\r\n        <a class='btn dashboard__btn btn--warn' (click)=\"onLogoutClick()\">Logout</a>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #loading>\r\n    <app-loading-spinner></app-loading-spinner>\r\n</ng-template>","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthApiService, AuthService } from '@ui/core/auth';\r\nimport { NotificationService, ValidationService } from '@ui/core/services';\r\n\r\nimport { Admin } from '../../interfaces';\r\n\r\n@Component({\r\n    selector: 'app-register',\r\n    templateUrl: './register.component.html',\r\n    styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n    username: string = '';\r\n    password: string = '';\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authApiService: AuthApiService,\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        public validationService: ValidationService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.notificationService.createNotification('This functionality is not available.');\r\n        this.router.navigate(['admin']);\r\n\r\n        if(this.authService.isLoggedIn()) {\r\n            this.notificationService.createNotification('Already logged in.');\r\n            this.router.navigate(['admin']);\r\n        }\r\n    }\r\n\r\n    onRegisterSubmit(): void {\r\n        const admin: Admin = {\r\n            username: this.username,\r\n            password: this.password\r\n        };\r\n\r\n        this.authApiService.registerAdmin(admin).subscribe(res => {\r\n            this.notificationService.createNotification(`Hello, ${admin.username}! Please log in.`);\r\n            this.router.navigate(['admin/login']);\r\n        });\r\n    }\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthApiService, AuthService } from '@ui/core/auth';\r\nimport { NotificationService, ValidationService } from '@ui/core/services';\r\n\r\nimport { Admin } from '../../interfaces';\r\n\r\n@Component({\r\n    selector: 'app-login',\r\n    templateUrl: './login.component.html',\r\n    styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n    username: string = '';\r\n    password: string = '';\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authApiService: AuthApiService,\r\n        private authService: AuthService,\r\n        private notificationService: NotificationService,\r\n        public validationService: ValidationService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        if(this.authService.isLoggedIn()) {\r\n          this.notificationService.createNotification('Already logged in.');\r\n          this.router.navigate(['admin']);\r\n        }\r\n    }\r\n\r\n    onLoginSubmit(): void {\r\n        const admin: Admin = {\r\n            username: this.username,\r\n            password: this.password\r\n        };\r\n\r\n        this.authApiService.loginAdmin(admin).subscribe(res => {\r\n          this.authService.loginAdmin(res.id, res.username);\r\n          this.notificationService.createNotification(`Welcome back, ${res.username}!`);\r\n          this.router.navigate(['admin']);\r\n        });\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { AuthApiService, AuthService } from '@ui/core/auth';\r\nimport {\r\n    NotificationService,\r\n    TrackingService\r\n} from '@ui/core/services';\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus\r\n} from '@ui/modules/portfolio/models';\r\nimport {\r\n    PortfolioApiService, PortfolioComparisonService, PortfolioEditorService,\r\n    PortfolioProfileService\r\n} from '@ui/modules/portfolio/services';\r\n\r\n@Component({\r\n    selector: 'app-dashboard',\r\n    templateUrl: './dashboard.component.html',\r\n    styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n    profiles: PortfolioProfile[];\r\n\r\n    isLoaded: boolean = false;\r\n\r\n    constructor(\r\n        private router: Router,\r\n        private authApiService: AuthApiService,\r\n        public authService: AuthService,\r\n        public notificationService: NotificationService,\r\n        private portfolioApiService: PortfolioApiService,\r\n        private portfolioComparisonService: PortfolioComparisonService,\r\n        private portfolioEditorService: PortfolioEditorService,\r\n        private portfolioProfileService: PortfolioProfileService,\r\n        private titleService: Title,\r\n        public trackingService: TrackingService\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.titleService.setTitle(`Admin Dashboard | Matthew Maxwell`);\r\n\r\n        if(this.authService.isLoggedIn()) {\r\n            this.populateProfiles();\r\n        } else {\r\n            this.isLoaded = true;\r\n        }\r\n    }\r\n\r\n    populateProfiles(): void {\r\n        this.portfolioApiService.getProfiles().subscribe((res: PortfolioProfile[]) => {\r\n            this.profiles = res.sort(this.portfolioComparisonService.profiles);\r\n            this.setActiveProfile();\r\n\r\n            this.isLoaded = true;\r\n        });\r\n    }\r\n\r\n    private setActiveProfile(): void {\r\n        const activeProfile = this.profiles.find(p => p.status.status === 'ACTIVE');\r\n        this.portfolioProfileService.setActiveProfile(activeProfile);\r\n    }\r\n\r\n    changeProfile(profile: PortfolioProfile): void {\r\n        if(profile.status.status === 'ACTIVE') return;\r\n\r\n        this.portfolioApiService.activateProfile(profile.id).subscribe((res: PortfolioProfile) => {\r\n            this.portfolioProfileService.setActiveProfile(res);\r\n\r\n            this.modifyProfileStatuses(res.id);\r\n            this.notificationService.createNotification(`Successfully activated the \"${res.name}\" profile!`);\r\n        });\r\n    }\r\n\r\n    private modifyProfileStatuses(activeId: number): void {\r\n        this.profiles.forEach(p => {\r\n            if(p.id === activeId) {\r\n                p.status = new PortfolioProfileStatus({ status: 'ACTIVE' });\r\n            } else {\r\n                p.status = new PortfolioProfileStatus({ status: 'INACTIVE' });\r\n            }\r\n        });\r\n    }\r\n\r\n    onLogoutClick(): void {\r\n        this.authApiService.logoutAdmin().subscribe(res => {\r\n            this.notificationService.createNotification(`Bye, ${this.authService.getAdmin()}!`);\r\n            this.authService.logoutAdmin();\r\n            this.router.navigate(['admin']);\r\n        });\r\n    }\r\n\r\n    sendProfileToEditor(profile: PortfolioProfile): void {\r\n        this.portfolioEditorService.setProfile(profile);\r\n    }\r\n\r\n    deleteProfile(profile: PortfolioProfile): void {\r\n        if(this.profiles.length === 1) {\r\n            this.notificationService.createNotification('Cannot delete only existing profile.');\r\n            return;\r\n        }\r\n\r\n        this.portfolioApiService.deleteProfile(profile.id).subscribe((res: any) => {\r\n            this.profiles = this.profiles.filter(p => p.id !== profile.id);\r\n            this.notificationService.createNotification('Successfully delete profile!');\r\n            if(profile.status.status === 'ACTIVE') location.reload();\r\n        });\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { CoreModule } from '@ui/core/core.module';\r\n\r\nimport { AdminComponent } from './admin.component';\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\n\r\nimport {\r\n    DashboardComponent,\r\n    LoginComponent,\r\n    RegisterComponent\r\n} from './components';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AdminComponent,\r\n        DashboardComponent,\r\n        LoginComponent,\r\n        RegisterComponent\r\n    ],\r\n    imports: [\r\n        AdminRoutingModule,\r\n        CommonModule,\r\n        CoreModule,\r\n        FormsModule\r\n    ]\r\n})\r\nexport class AdminModule { }","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { AdminComponent } from './admin.component';\r\n\r\nimport {\r\n    DashboardComponent,\r\n    LoginComponent,\r\n    RegisterComponent\r\n} from './components';\r\n\r\nexport const routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: AdminComponent,\r\n        children: [\r\n            {\r\n                path: '',\r\n                component: DashboardComponent\r\n            },\r\n            {\r\n                path: 'login',\r\n                component: LoginComponent\r\n            },\r\n            {\r\n                path: 'register',\r\n                component: RegisterComponent\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AdminRoutingModule { }","<div class='section login'>\r\n    <h1 class='login__header'>Login</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='login__form' (ngSubmit)='onLoginSubmit()'>\r\n        <div class='form-field login__form-field'>\r\n            <label>Username</label>\r\n            <br><br>\r\n            <input [(ngModel)]='username' name='username' required autofocus>\r\n        </div>\r\n        <br>\r\n\r\n        <div class='form-field form-field--password login__form-field'>\r\n            <label>Password</label>\r\n            <br><br>\r\n            <input [(ngModel)]='password' name='password' type='password' required>\r\n        </div>\r\n        <br>\r\n            \r\n        <button\r\n            aria-label='Login submit'\r\n            [ngClass]=\"{'btn--inactive': !validationService.hasValidAdminCredentials(username, password)}\"\r\n            class='btn login__form-btn'\r\n            [disabled]='!validationService.hasValidAdminCredentials(username, password)'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>","<div class='section register'>\r\n    <h1 class='register__header'>Register</h1>\r\n\r\n    <div class=\"line-divider\"></div>\r\n\r\n    <form class='register__form' (ngSubmit)='onRegisterSubmit()'>\r\n        <div class='form-field register__form-field'>\r\n            <label>Username</label>\r\n            <br><br>\r\n            <input [(ngModel)]='username' name='username' required autofocus>\r\n        </div>\r\n        <br>\r\n\r\n        <div class='form-field form-field--password register__form-field'>\r\n            <label>Password</label>\r\n            <br><br>\r\n            <input [(ngModel)]='password' name='password' type='password' required>\r\n        </div>\r\n        <br>\r\n            \r\n        <button\r\n            aria-label='Register submit'\r\n            [ngClass]=\"{'btn--inactive': !validationService.hasValidAdminCredentials(username, password)}\"\r\n            class='btn register__form-btn'\r\n            [disabled]='!validationService.hasValidAdminCredentials(username, password)'\r\n        >\r\n            Submit\r\n        </button>\r\n    </form>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.scss']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}","<div class=\"app-loading\">\r\n    <div class=\"logo\"></div>\r\n    <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n        <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n</div>","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class PortfolioProfileStatus implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProfileStatus>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    status: string;\r\n}\r\n","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nexport class PortfolioProfileTechnology implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProfileTechnology>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n        return this;\r\n    }\r\n\r\n    id?: number;\r\n\r\n    name: string;\r\n    display_order: number;\r\n}","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nimport { PortfolioProfile } from './portfolio-profile.model';\r\n\r\nexport class PortfolioProject implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProject>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        this.profiles = input.profiles.map(p => new PortfolioProfile({ ...p }).deserialize(p));\r\n\r\n        return this;\r\n    }\r\n\r\n    id?:            number;\r\n\r\n    profiles:       PortfolioProfile[];\r\n\r\n    name:           string;\r\n    tagline:        string;\r\n    description:    string;\r\n\r\n    image_url:      string;\r\n\r\n    link_name:      string;\r\n    link_url:       string;\r\n\r\n    created_at:     Date;\r\n    updated_at:     Date;\r\n}\r\n","import { Deserializable } from '@ui/core/models/deserializable.model';\r\n\r\nimport { PortfolioProfileStatus } from './portfolio-profile-status.model';\r\nimport { PortfolioProfileTechnology } from './portfolio-profile-technology.model';\r\nimport { PortfolioProject } from './portfolio-project.model';\r\n\r\nexport class PortfolioProfile implements Deserializable {\r\n    constructor(partial: Partial<PortfolioProfile>) {\r\n        Object.assign(this, partial);\r\n    }\r\n\r\n    deserialize(input: any): this {\r\n        Object.assign(this, input);\r\n\r\n        this.status = input.status.map(s => new PortfolioProfileStatus({ ...s }).deserialize(s));\r\n        this.technologies = input.technologies.map(t => new PortfolioProfileTechnology({ ...t }).deserialize(t));\r\n        this.projects = input.projects.map(p => new PortfolioProject({ ...p }).deserialize(p));\r\n\r\n        return this;\r\n    }\r\n\r\n    id?:             number;\r\n\r\n    status:         PortfolioProfileStatus;\r\n    technologies:   PortfolioProfileTechnology[];\r\n    projects:       PortfolioProject[];\r\n\r\n    name:           string;\r\n    tagline:        string;\r\n    landing:        string;\r\n    about:          string;\r\n    image_url:      string;\r\n\r\n    created_at:      Date;\r\n    updated_at:      Date;\r\n}\r\n"]}