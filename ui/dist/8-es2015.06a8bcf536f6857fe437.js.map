{"version":3,"sources":["webpack:///src/app/modules/portfolio/services/portfolio-api.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-comparison.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-editor.service.ts","webpack:///src/app/modules/portfolio/services/portfolio-profile.service.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.ts","webpack:///src/app/core/components/loading-spinner/loading-spinner.component.html"],"names":["PortfolioApiService","http","super","profileId","headers","this","contentTypeHeader","put","environment","API_URL","profile","post","id","delete","get","project","PortfolioComparisonService","profiles","p1","p2","name","profileTechnologies","pt1","pt2","display_order","projects","PortfolioEditorService","console","log","undefined","PortfolioProfileService","activeProfile","LoadingSpinnerComponent"],"mappings":"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","file":"x","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { environment } from '@ui/environments/environment';\r\nimport { ApiService } from '@ui/core/http';\r\n\r\nimport {\r\n    PortfolioProfile,\r\n    PortfolioProfileStatus,\r\n    PortfolioProfileTechnology,\r\n    PortfolioProject\r\n} from '../models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioApiService extends ApiService {\r\n    constructor(http: HttpClient) {\r\n        super(http);\r\n    }\r\n\r\n    activateProfile(profileId: number): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profileId}/activate`,\r\n            {},\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    createProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles`,\r\n            profile,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProfile(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/profiles/${id}`)\r\n    }\r\n\r\n    getProfiles(): Observable<PortfolioProfile[]> {\r\n        return this.http.get<PortfolioProfile[]>(`${environment.API_URL}/portfolio/profiles`);\r\n    }\r\n\r\n    getProfileStatuses(): Observable<PortfolioProfileStatus[]> {\r\n        return this.http.get<PortfolioProfileStatus[]>(`${environment.API_URL}/portfolio/profiles/statuses`);\r\n    }\r\n\r\n    getProfileTechnologies(id: number): Observable<PortfolioProfileTechnology[]> {\r\n        return this.http.get<PortfolioProfileTechnology[]>(`${environment.API_URL}/portfolio/profiles/${id}/technologies`);\r\n    }\r\n\r\n    updateProfile(profile: PortfolioProfile): Observable<PortfolioProfile> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProfile>(\r\n            `${environment.API_URL}/portfolio/profiles/${profile.id}`,\r\n            profile,\r\n            { headers }\r\n        )\r\n    }\r\n\r\n    createProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.post<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n\r\n    deleteProject(id: number): Observable<any> {\r\n        return this.http.delete<any>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProject(id: number): Observable<PortfolioProject> {\r\n        return this.http.get<PortfolioProject>(`${environment.API_URL}/portfolio/projects/${id}`);\r\n    }\r\n\r\n    getProjects(): Observable<PortfolioProject[]> {\r\n        return this.http.get<PortfolioProject[]>(`${environment.API_URL}/portfolio/projects`);\r\n    }\r\n\r\n    updateProject(project: PortfolioProject): Observable<PortfolioProject> {\r\n        const headers = this.contentTypeHeader();\r\n\r\n        return this.http.put<PortfolioProject>(\r\n            `${environment.API_URL}/portfolio/projects/${project.id}`,\r\n            project,\r\n            { headers }\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ComparisonService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProfileTechnology, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioComparisonService extends ComparisonService {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    profiles = (p1: PortfolioProfile, p2: PortfolioProfile) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    profileTechnologies = (pt1: PortfolioProfileTechnology, pt2: PortfolioProfileTechnology) => {\r\n        if(pt1.display_order > pt2.display_order) return 1;\r\n        if(pt1.display_order < pt2.display_order) return -1;\r\n\r\n        return 0;\r\n    };\r\n\r\n    projects = (p1: PortfolioProject, p2: PortfolioProject) => {\r\n        if(p1.name > p2.name) return 1;\r\n        if(p1.name < p2.name) return -1;\r\n\r\n        return 0;\r\n    };\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { EditorService } from '@ui/core/services';\r\n\r\nimport { PortfolioProfile, PortfolioProject } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PortfolioEditorService extends EditorService {\r\n    private profile: PortfolioProfile;\r\n    private project: PortfolioProject;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    getProfile(): PortfolioProfile {\r\n        console.log(this.profile);\r\n        return this.profile;\r\n    }\r\n\r\n    hasProfile(): boolean {\r\n        return this.profile !== undefined;\r\n    }\r\n\r\n    setProfile(profile: PortfolioProfile): void {\r\n        this.profile = profile;\r\n        console.log(this.profile);\r\n    }\r\n\r\n    getProject(): PortfolioProject {\r\n        return this.project;\r\n    }\r\n\r\n    hasProject(): boolean {\r\n        return this.project !== undefined;\r\n    }\r\n\r\n    setProject(project: PortfolioProject): void {\r\n        this.project = project;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { PortfolioProfile } from '@ui/modules/portfolio/models';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class PortfolioProfileService {\r\n    private activeProfile: PortfolioProfile;\r\n\r\n    constructor() { }\r\n\r\n    public getActiveProfile(): PortfolioProfile {\r\n        return this.activeProfile;\r\n    }\r\n\r\n    public getActiveProfileName(): string {\r\n        return this.activeProfile ? this.activeProfile.name : 'Software Engineering';\r\n    }\r\n\r\n    public setActiveProfile(profile: PortfolioProfile): void {\r\n        this.activeProfile = profile;\r\n    }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-loading-spinner',\r\n  templateUrl: './loading-spinner.component.html',\r\n  styleUrls: ['./loading-spinner.component.scss']\r\n})\r\nexport class LoadingSpinnerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n}","<div class=\"app-loading\">\r\n    <div class=\"logo\"></div>\r\n    <svg class=\"spinner\" viewBox=\"25 25 50 50\">\r\n        <circle class=\"path\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-width=\"2\" stroke-miterlimit=\"10\"/>\r\n    </svg>\r\n</div>"]}